<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>沉风网事</title>
    <link>https://blog.ipds.top/</link>
    <description>Recent content on 沉风网事</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 06 Sep 2019 11:58:06 +0200</lastBuildDate>
    
	<atom:link href="https://blog.ipds.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入分析Golang sync.pool优化</title>
      <link>https://blog.ipds.top/2019/09/06/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90golang-sync.pool%E4%BC%98%E5%8C%96/</link>
      <pubDate>Fri, 06 Sep 2019 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2019/09/06/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90golang-sync.pool%E4%BC%98%E5%8C%96/</guid>
      <description>前言 最近golang的1.13版本发布了，有很多新特性与改进合入。这里主要分析sync.pool的优化。
本文主要解答以下几个问题：
 sync.pool优化体现在哪里？ 优化是如何实现？ 优化的好处有哪些？  优化 具体优化项如下：
 无锁化 GC策略  无锁化 sync.pool实现了无锁化，具体如下：
go1.12.1版本实现
// Local per-P Pool appendix. type poolLocalInternal struct { private interface{} // Can be used only by the respective P. shared []interface{} // Can be used by any P. Mutex // Protects shared. }  go1.13版本
// Local per-P Pool appendix. type poolLocalInternal struct { private interface{} // Can be used only by the respective P.</description>
    </item>
    
    <item>
      <title>瑞·达利欧：不投资中国才是巨大的风险</title>
      <link>https://blog.ipds.top/2019/08/18/%E7%91%9E%E8%BE%BE%E5%88%A9%E6%AC%A7%E4%B8%8D%E6%8A%95%E8%B5%84%E4%B8%AD%E5%9B%BD%E6%89%8D%E6%98%AF%E5%B7%A8%E5%A4%A7%E7%9A%84%E9%A3%8E%E9%99%A9/</link>
      <pubDate>Sun, 18 Aug 2019 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2019/08/18/%E7%91%9E%E8%BE%BE%E5%88%A9%E6%AC%A7%E4%B8%8D%E6%8A%95%E8%B5%84%E4%B8%AD%E5%9B%BD%E6%89%8D%E6%98%AF%E5%B7%A8%E5%A4%A7%E7%9A%84%E9%A3%8E%E9%99%A9/</guid>
      <description>不投资中国才是巨大的风险 最近，桥水基金创始人及《原则》的作者瑞·达利欧公开表示：不投资中国才是巨大的风险。如下图所示：
作为一个世界富豪榜排名前100的大富豪，
作为一个掌握1500亿美元的对冲基金的掌门人，
作为一个美国人，
作为一个在过去40年多次成功预测经济危机的投资人。
他的话当然不同凡想，引人思考。
当然我们不能随便轻信这个结论，我们应该具体了解一下，他是如何得出这个结论？下面展开说明如下：
瑞·达利欧的理由 模型 在视频中瑞达利欧提出一个国家实力的模型，这个模型从六个方面来衡量一个国家的实力，具体如下：
 科技和教育 生产 贸易 军事 金融 货币储备地位
  下面这一张图是荷兰，英国，美国，中国这个四个国家在最近几百年来在上述六个方面的实力曲线图：
多样性原则 作为一个掌握1500亿美元的对冲基金的掌门人，瑞达利欧深知保持投资多样性十分必要。他们的投资是面向全球。中国市场情况与欧美不相同，具有独特性，是风险投资组合保持多样性不或缺少的选择。
相对风险 风险无处不在。常人都明白，都有风险的情况，选择风险最小的。
下面对比欧洲，美国，中国三个地区的风险情况。
先说欧洲，瑞·达利欧认为欧洲有巨大风险，存在以下问题：
 货币政策失效 政治分裂，如英国脱欧 不参与科技革命  再看美国，瑞·达利欧认为美国存在以下问题：
 财富贫富差距 缺少有效的货币政策 政治系统的冲突  最后看中国，瑞·达利欧认为：相比较于美国，中国有更大货币政策和财政政策空间，并正在处理债务问题。
结合上面的比较，瑞·达利欧认为相比较于其他市场，中国的市场风险最小。
中国的成长与实力 先看过去的成长，以资本市场为例：
说明：红色表示股票市场，蓝色表示债券市场；左边是中国资本市场空间，右边是外国资本持有的中国金融资产情况。
补充一下从左边曲线图可以看出中国的股票市场领域虽然十年来上证指数基本无增长，但是市值还是有增长，但是没有跟上GDP的增长。
视角回到现在，首先看一下科技领域的风险投资情况：
从上图可知:
 中国在fintech领域领先美国排名第一 在AI and machine learning（AI和机器学习）领域排名第三，落后于美国与英国 在wearables(可穿戴设备)领域排名第二 在virtual reality(虚拟现实)领域排名第二 在educational technology(教育技术)领域排名第二 在autonomous driving(自动驾驶)领域排名第二  再看一下中美独角兽对比：
显而易见，中国在独角兽数量上与美国有13%左右的差距，但是估值上仅2%的差距。
最后看一下中美实力对比：
看到这张图，相信大家会理解中国再继续闷声发大财不是一件容易的事情了。
相信这些数据会让很多人得出一个结论：中美毛衣冲突不影响中国继续崛起的进程。
对中国十分熟悉 还有一点考虑，视频中没有明确投及，就是瑞·达利欧对中国的熟悉，作为一名美国人，其实瑞·达利欧对中国十分熟悉，他从1984年第一次来到中国后，此后35年里他不断地来到中国并熟悉中国，并且他的一个儿子曾经在中国读书。
后记 本文只是简单介绍，关于瑞达利欧是如何看待中美毛衣冲突，更多信息请看原始视频，原始视频时长有31分钟。关注本公众帐号，输入 投资中国，获取原始视频的百度云下载链接。</description>
    </item>
    
    <item>
      <title>Facebook libra是昙花一现还是星星之火</title>
      <link>https://blog.ipds.top/2019/06/26/facebook-libra%E6%98%AF%E6%98%99%E8%8A%B1%E4%B8%80%E7%8E%B0%E8%BF%98%E6%98%AF%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/</link>
      <pubDate>Wed, 26 Jun 2019 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2019/06/26/facebook-libra%E6%98%AF%E6%98%99%E8%8A%B1%E4%B8%80%E7%8E%B0%E8%BF%98%E6%98%AF%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/</guid>
      <description>前言 最近随着Libra横空出世，整个互联网有关的Libra新闻，评论等层出不穷，众说纷云。这么热闹，我当然也要插一脚，讲讲自己的一些思考与看法。
方向 在具体分析之前，先看看libra定位：
 Libra的使命是建立一套简单的、无国界的货币和为数十亿人服 务的金融基础设施。
 从上面可知libra整个系统定位是金融基础设施。这是符合Facebook的定位，作为技术平台，为金融服务提供支撑。
技术方向，libra选择从许可型区块链开始。这是一个明智的选择，虽然现在不知道其具体实现情况，但是联盟链有如下优势：
 相比较于公链有更好的互操作性 便于将libra集成到Facebook上各个超级App中，如WhatApp，Messenger等 避免公链钱包在用户体验先天不足或者给普通用户的不适应 更好安全管理与防范 避免公链的一些技术问题，如DCS不可能三角  还有一点就是相比较于其他的区块链先造链，再开发应用，找用户试验应用场景，Libra是先有场景和用户，再造链解决具体问题如支付和跨境。
 Libra 的目标是成为一种稳定的数字加密货币，将全部使用真实资产储备（称为“Libra 储备”）作为担保，并由买卖Libra并存在竞争关系的交易平台网络提供支持
 Libra Coin定位于稳定币。这样从一开始就避免了炒作，而是将整个重心放在应用领域。
我们还可以从侧面了解这个方向的正确性。Facebook创始人扎克伯格是一位十分具有前瞻眼光和判断力的领袖。下面的例子可参考：
 2012年Facebook宣布10亿美元收购只有只有13个员工的Instagram，从投资的角度看如今回报率在100倍左右 2014年Facebook以 160 亿美金现金加股票（其中包含40亿美金的现金以及价值120亿美金的公司股票。此外，Facebook还将为WhatsApp的创始人及员工提供约价值30亿美金的限制股股票，分期四年发放）收购移动聊天工具WhatsApp，整个WhatsApp公司总共不到50人。  这两次收购让Facebook拿到移动互联网的船票。
SWOT分析 下面就按SWOT展开说明。
Strengths 显而易见，Facebook具有以下优势：
 Facebook在全球有27亿用户 Facebook有真实的用户社交数据，天然支持KYC Facebook有优秀人才 libra有广泛的合作伙伴 Facebook有钱 公司的执行力  Weaknesses Facebook一直是一个toC的公司，有以下劣势：
 Facebook在金融领域缺少经验 Facebook不擅长与政府打交道的  Opportunities 在白皮书列举的机会，具体如下：
 •• 我们认为，应该让更多人享有获得金融服务和廉价资本的权利。
•• 我们认为，每个人都享有控制自己合法劳动成果的固有权利。
•• 我们相信，开放、即时和低成本的全球性货币流动将为世界创造巨大的经济机遇和商业价值。
•• 我们坚信，人们将会越来越信任分散化的管理形式。
•• 我们认为，全球货币和金融基础设施应该作为一种公共产品来设计和管理。
•• 我们认为，所有人都有责任帮助推进金融普惠，支持遵守网络道德规范的用户，并持续维护这个生态系统的完整性。
 官方白皮书是从用户与全球经济角度来看的，从Facebook这个公司的角度来看，有如下机会：
 一种货币 一个联盟 一种权力 一项收入 一种趋势  一种货币 显而易见这种货币就是Libra coin。在现在的经济系统中可以发行货币只有国家的央行。以美国为例，作个类比如下：</description>
    </item>
    
    <item>
      <title>深入分析Golang sync.pool</title>
      <link>https://blog.ipds.top/2019/06/10/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90golang-sync.pool/</link>
      <pubDate>Mon, 10 Jun 2019 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2019/06/10/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90golang-sync.pool/</guid>
      <description>定义 sync.Pool是一个可以存或取的临时对象池。对外提供New、Get、Put等API，利用mutex支持多线程并发。
目标 sync.Pool解决以下问题：
 增加临时对象的用复用率，减少GC负担 通过对象的复用，减少内存申请开销，有利于提高一部分性能  实现 这一部分回答如何实现的问题。
关于了解实现，最好的办法就是看代码。
描述 type Pool struct { noCopy noCopy local unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal localSize uintptr // size of the local array // New optionally specifies a function to generate // a value when Get would otherwise return nil. // It may not be changed concurrently with calls to Get. New func() interface{} }  各个成员含义如下：</description>
    </item>
    
    <item>
      <title>人生中最昂贵的教训：SIM卡转移攻击的细节(译文)</title>
      <link>https://blog.ipds.top/2019/05/30/%E4%BA%BA%E7%94%9F%E4%B8%AD%E6%9C%80%E6%98%82%E8%B4%B5%E7%9A%84%E6%95%99%E8%AE%ADsim%E5%8D%A1%E8%BD%AC%E7%A7%BB%E6%94%BB%E5%87%BB%E7%9A%84%E7%BB%86%E8%8A%82%E8%AF%91%E6%96%87/</link>
      <pubDate>Thu, 30 May 2019 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2019/05/30/%E4%BA%BA%E7%94%9F%E4%B8%AD%E6%9C%80%E6%98%82%E8%B4%B5%E7%9A%84%E6%95%99%E8%AE%ADsim%E5%8D%A1%E8%BD%AC%E7%A7%BB%E6%94%BB%E5%87%BB%E7%9A%84%E7%BB%86%E8%8A%82%E8%AF%91%E6%96%87/</guid>
      <description> 上周三我损失了10万美元。它在24小时的时间内在“SIM转移攻击”中消失，耗尽了我的Coinbase帐户。事件已经过去了四天，我被摧毁了。我寝食难安;我充满了焦虑，懊悔和尴尬。
这是我生命中最昂贵的一课，我想与尽可能多的人分享我的经验与教训。我的目标是提高对这类攻击的认识，并促使大家提高在线身份的安全性。
这仍然是非常原始的（我还没有告诉我的家人）；请大家保留对本文所述的天真安全措施的判断。
攻击的细节 您可能会问自己，究竟什么是“SIM转移攻击”？为了描述攻击，我们来看一下典型的在线身份。对于大多数人来说，下图应该看起来很熟悉。
我们大多数人都有一个主电子邮件帐户，该帐户与很多其他在线帐户相关联。我们大多数人还有一个移动设备，如果你忘了密码，可以用这个移动设备来恢复您的电子邮件密码。
授权的SIM转移 将SIM卡转移到另一台设备是移动运营商为其客户提供的服务。它允许客户将他们的电话号码转移到新设备。在大多数情况下，这是完全合法的要求;当我们升级到新手机，切换移动运营商等时会发生这种情况。
SIM转移攻击 但是，“SIM转移攻击”是由未经授权的来源（攻击者）执行的恶意转移。攻击者将您的 SIM卡转移到他们控制的手机上。然后，攻击者在您的电子邮件帐户上启动密码重置流程。验证码会从您的电子邮件提供商发送到您的电话号码。 攻击者会截获该电话号码，因为他们现在控制您的SIM卡。下图逐步概括了攻击过程。
一旦攻击者控制了您的主电子邮件帐户，他们就会开始绕过您通过该电子邮件地址（银行帐户，社交媒体帐户等）管理并支配您的任何在线服务及其资产。如果他们非常恶意，他们甚至可以锁定你的帐户而你却几乎无法收回它们。
花点时间检查一下单个Google帐户绑定的大量敏感信息：
 您的地址，出生日期和其他私人，个人身份信息 访问您（和/或您的合作伙伴）的潜在妥协照片 访问您的日历和即将到来的旅行日期 访问您的私人电子邮件，文档和搜索历史记录 访问您的个人联系人及其私人信息以及与您的关系 访问您的主电子邮件地址用作身份验证来源的所有其他在线服务  事件时间线 通过更好地掌握如何进行此类攻击以及所涉及的范围，让我们深入探讨此特定攻击的时间线。我想描绘一下攻击是如何被执行的，以及我是如何经历这些事件的，以及如果您遇到类似的症状，您可以做些什么来保护自己。
时间线分为四个部分：
 我所经历的：从我的观点来看所经历的事件。如果你遇到类似的事情，这些都是你可能受到攻击的明确指示。
 攻击者正在做什么：黑客用来进入我的Coinbase帐户的基本策略。
 我感知到的威胁级别：我在这些事件发生时将其归因于威胁级别。
 我应该拥有的威胁级别：事后看来，我希望在这些事件发生时我会拥有的威胁级别。
  经验教训+建议 这是我生命中最昂贵的一节课。我在24小时内失去了相当重要比例的净值资产; 并且是不可逆的。以下是我鼓励其他人用来更好地保护自己的在线安全的一些建议： 使用硬件钱包，以确保您的加密：将您的密码到硬件钱包 /离线存储/ 多SIG钱包，只要你不交易。不要将资金闲置在交易所或法定进场。我将Coinbase视为银行账户，并且在发生攻击时你绝对没有追索权。我比大多数人更了解风险，但从未想过这样的事情会发生在我身上。我非常后悔没有采取加密安全措施。
 基于SMS的2FA还不够：无论您尝试在线保护的资产和/或身份如何，都要升级到基于硬件的安全性（即：攻击者为实施攻击而必须物理获取的物理内容）。虽然Google Authenticator和Authy可以将您的移动设备转变为基于硬件的安全性，但我建议您更进一步。拿起你实际控制的YubiKey，不能被欺骗。
 减少您的在线足迹：减少不必要地在线分享个人身份信息（出生日期，位置，嵌入其中的地理位置数据的图片等）的冲动。在发生攻击时，所有这些准公开数据都可以针对您。 Google Voice 2FA：在某些情况下，在线服务不支持基于硬件的2FA（它们依赖于较弱的基于SMS的2FA）。在这些情况下，您最好创建一个Google语音电话号码（无法通过SIM卡转移）并使用具有2-Factor Auth恢复号码的电话号码。
 创建辅助电子邮件地址：不是将所有内容绑定到单个电子邮件地址，而是为关键在线身份（银行帐户，社交媒体帐户，加密交换等）创建辅助地址。请勿将此电子邮件地址用于其他任何内容并将其保密。使用某种形式的基于硬件的2FA备份该地址。
 离线密码管理器：使用密码管理器输入密码。更好的是，使用密码存储等脱机密码管理器。lrvick拥有各种密码管理器的优秀对比图表，以及针对更具技术倾向的审查建议。
  关于读者的评论 我明白这一点：鉴于我天真的安全实践，我可能就应该注定被黑客攻击。这样做不会减少受到任何伤害，并且会削弱这个故事的主旨，即：
 让别人知道受到伤害是多么容易 使用上述知识和建议来优先考虑您的在线身份的安全性  我禁不住想到我可以做的小而轻松的事情来保护自己。我的脑海中涌现各种假设。
然而，这些想法伴随懒惰和幸存者偏见。我从来没有认真对待我的在线安全，因为我从未经历过攻击。虽然我了解自己的风险状况，但是我就是太懒导致我没有用该有的严谨来保护我的资产。
我恳请你们从这些错误中吸取教训。
参考  The Most Expensive Lesson Of My Life: Details of SIM port hack  </description>
    </item>
    
    <item>
      <title>关于zoom的一些思考与看法</title>
      <link>https://blog.ipds.top/2019/04/28/%E5%85%B3%E4%BA%8Ezoom%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%B8%8E%E7%9C%8B%E6%B3%95/</link>
      <pubDate>Sun, 28 Apr 2019 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2019/04/28/%E5%85%B3%E4%BA%8Ezoom%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%B8%8E%E7%9C%8B%E6%B3%95/</guid>
      <description> 前言 最近zoom上市，作为一名华人创业公司自然大受关注。下面从以下几个方面谈谈自己的一些思考与看法：
 技术 领导 产品 商业  技术 对于视频面试会议，技术核心分为以下三大块：
 基础设施架构 网络传输技术 音视频技术  领导  招聘方面重点在自我激励和学习，招聘有发展潜力的人 2019年，Zoom还在全美最佳雇主公司排名中位居第二位，也是一个非常让员工喜欢的创业公司。这个投票应该还是可以相信的，没有内幕 信任来自开放。越开放，越信任。作为公司的领导要开放与底层员工的连接通道 一个公司或者一个组织甚至一个国家，解决问题是第一要义是正视问题，而不是逃避问题，应该鼓励发现问题  产品 先说对于zoom的评价，确实好用，个人从2016年就开始使用。
 永无止境，WebEx在当时的市场已经占有很大的市场，但是zoom创始人并没有停留在市场占用率上而是准确地看到WebEx背后的问题。 欲速则不达。耐心地打磨产品，zoom在2011年成立，到2013年才首次发布产品Zoom Meetings，这放在国内是无法想像的，很多创业公司三个月就要出产品，结果创业公司还是每年死一大片，而zoom却从视频会议领域众多竞争对手中脱颖而出。 套用一句话：从人民群众中来,到人民群众中去。从用户中来，到用户中去，需求从用户中来，真正地倾听用户的心声，产品与服务落实到用户，让用户享受实在的便利与好处 直播改变生活，学习与工作；快手、抖音、zoom就是很好的说明 视频大行其道，视频降低用户门槛，视频用户体验更好，视频中包含更多的信息  商业  追求低成本，高效率，zoom将研发大部分放在中国内地，中国内地人均30W左右，在美国硅谷招一个软件工程师起薪差不多90W吧，这样从而整体上降低了zoom的成本。zoom上市就能营利，让其在股价方面表现十分出色。 双赢的原则，zoom让员工开会不受地点限制，只要有网络就可以，同时也降低企业的运行成本。 降低门槛，视频会议降低了会议的门槛，打破空间的限制，zoom易用性降低了使用门槛，只要手机和电脑再加上网络就可以进行一场会议。国内有不少企业还卖专门的视频会议硬件系统，这样一开始就输，研发成本需要投入，价格还高 优势原则。市场竞争，优势劣汰。一定要建立优势如成本优势，用户体验优势，先发优势，差异化优势 zoom有2000倍的市盈率。这说明什么？泡沫吗？从数字上看是这样的。但是股价体现是预期，这说明视频协作会是未来发展一个方向。视频协作现在应用率还是很低，未来还是有很大的增长空间，除了视频会议还有更多的应用场景，如远程医疗。  总结 zoom创始人袁征从1997年WebEx一名程序员到2011年思科工程副总裁，负责WebEx产品。在这个阶段他完成了技术与领导大部分积累。从2011年开始创办zoom进行产品化与商业化，到2019年IPO上市，使产品化与商业化达到一个新的台阶。程序员在提高自己的技术能力的同时，要努力培养领导能力，产品能力，商业能力。
参考  Zoom成功上市：市值超160亿美元 华裔创始人走向人生巅峰 连续四年保持三位数增长，搞视频会议的 Zoom 有三大关键秘诀 扎克伯格：80%的企业文化由创始人决定 《原则》读书笔记八 如何做到极度求真与极度透明 生活在一个十分钟就能走完的安逸小城，给生活做减法  </description>
    </item>
    
    <item>
      <title>分享一种分析信息技术发展的框架</title>
      <link>https://blog.ipds.top/2019/03/10/%E5%88%86%E4%BA%AB%E4%B8%80%E7%A7%8D%E5%88%86%E6%9E%90%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E7%9A%84%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sun, 10 Mar 2019 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2019/03/10/%E5%88%86%E4%BA%AB%E4%B8%80%E7%A7%8D%E5%88%86%E6%9E%90%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E7%9A%84%E6%A1%86%E6%9E%B6/</guid>
      <description>信息技术发展史 为了与原文保持一致，将信息技术发展史分为以下6个阶段：
 大型机时代 PC时代 互联网时代
 社交网络时代
 智能手机时代 区块链时代  框架介绍 将信息技术要素分为以下四种：
 IO(接口) Infrastrure(基础设施) CPU(计算) HD(存储)  将技术要素分布为两个方向：
 User(用户端) Remote(远端即服务端及云端)  总体上来说，整个框架具有普适性，并且框架简单清晰。
大型机时代-&amp;gt;PC时代 框架变化:
成本：
 计算处理能力减弱，存储空间变小  收益：
 降低计算机使用门槛，方便更多人使用  数据:
主机集中数据转向个人PC时代去中心化数据
开发者的新机会：
 分发(软盘，CD) 新技术(本地数据，GUI，扬声器)  市场的新机会：
 消费级操作系统(微软，苹果) 视频游戏(EA sports，ID software) 硬件(Apple，IBM，HP，Dell)  PC时代-&amp;gt;互联网时代 框架变化:
成本：
 互联网数据成本 新公共基础设施的成本开支  收益：
 更多更便捷的信息访问入口，更大的存储空间，更强的计算处理能力  数据:
中心化存储数据。
开发者的新机会：
 分发(云基础设施)  市场的新机会：</description>
    </item>
    
    <item>
      <title>利用Kube Eagle监控Kubernetes集群资源</title>
      <link>https://blog.ipds.top/2019/03/09/%E5%88%A9%E7%94%A8kube-eagle%E7%9B%91%E6%8E%A7kubernetes%E9%9B%86%E7%BE%A4%E8%B5%84%E6%BA%90/</link>
      <pubDate>Sat, 09 Mar 2019 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2019/03/09/%E5%88%A9%E7%94%A8kube-eagle%E7%9B%91%E6%8E%A7kubernetes%E9%9B%86%E7%BE%A4%E8%B5%84%E6%BA%90/</guid>
      <description>安装helm helm是Kubernetes集群的npm。
下载脚本add_helm.sh 脚本内容如下：
#!/usr/bin/env bash echo &amp;quot;install helm&amp;quot; # installs helm with bash commands for easier command line integration curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash # add a service account within a namespace to segregate tiller kubectl --namespace kube-system create sa tiller # create a cluster role binding for tiller kubectl create clusterrolebinding tiller \ --clusterrole cluster-admin \ --serviceaccount=kube-system:tiller echo &amp;quot;initialize helm&amp;quot; # initialized helm within the tiller service account helm init --service-account tiller # updates the repos for Helm repo integration helm repo update echo &amp;quot;verify helm&amp;quot; # verify that helm is installed in the cluster kubectl get deploy,svc tiller-deploy -n kube-system  执行脚本安装helm sh add_helm.</description>
    </item>
    
    <item>
      <title>谈谈做事的原则</title>
      <link>https://blog.ipds.top/2019/01/23/%E8%B0%88%E8%B0%88%E5%81%9A%E4%BA%8B%E7%9A%84%E5%8E%9F%E5%88%99/</link>
      <pubDate>Wed, 23 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2019/01/23/%E8%B0%88%E8%B0%88%E5%81%9A%E4%BA%8B%E7%9A%84%E5%8E%9F%E5%88%99/</guid>
      <description>前言 这篇文章规划了很久，本来打算年前写，各种事情加上自己的拖延症，到现在才开始写。
做事 如果说人的一生做什么？总结一下，可以划分两个方面：
 做人 做事
  这两方面很多人喜欢用一句话来指导自己：低调做人，高调做事。在这里简单地谈一下自己对做事的原则的一些思考。
原则 关于做事，个人总结出来以下四个原则：
 不要给自己设限
 站在巨人的肩膀上 正确的方向与方法 敏捷的行动
  不要给自己设限 在中国历史上，从陈胜与吴广喊出&amp;rdquo;王候将相,宁有种乎&amp;rdquo;，在中国2000多年的历史，刘邦，刘裕，朱元璋以及太祖无不是从社会的底层走上权力的巅峰。在科技发展过程中 莱特兄弟并没有因为万有引力定律放弃研制飞机，终于发明世界上第一架飞机， 为后面的航空航天打下坚定的基础。
上面都是正面的例子，下面以自己为例举一个反面的例子：在2016年微信小程序出来的时候，当时就很看好微信小程序的未来，但是由于自己是一个后端程序员，不会前端代码开发，当时就认为这是前端作的事情。其实在现实工作中，我们时常也会给自己设限：
 &amp;ldquo;这个东西没有弄过&amp;rdquo; &amp;ldquo;我不会这个&amp;rdquo; &amp;ldquo;这个不属于我的工作范围&amp;rdquo;  二战以后，世界总体和平，特别是信息技术发展，无论是对公司和个人都有很多的空间和机会去探索。如果给自己设限，会失去大量的机会，对不起这个人类历史上最好的时代。
站在巨人的肩膀上 这里说明一下巨人的的肩膀是指不以个人或团体的意志为转移的环境及趋势等。举例如下：
 孙子兵法上讲天时，地利，人和；在中国历史上有以少胜多的例子如赤壁之战，无不是在天时，地利，人和上占了先机 前人的经验与成果，这里不得不推荐google搜索 趋势，正面的例子是这几年很流行的话：站在风口上，猪都能飞起来；反面的例子就是大润发，其创始人抱憾出局：我赢了所有对手，却输给了时代 利用平台与工具，如开发微信小程序就充分利用微信的用户，场景，流量，商业基础设施等 大部分政策，如房地产市场  对于如何站在巨人的肩膀上，个人一点体会：
 思想上作到拿来主义，行动方面要善假于物 避免不必要从0到1，如重复造轮子 合理地使用杠杆 不断学习与实践，提高认知水平与学习能力，保证可以站上更多巨人的肩膀  正确的方向与方法 &amp;ldquo;选择比努力重要&amp;rdquo;， 这是大家常说一句话，可见正确的方向与方法的重要性。
这里引用曹大在其个人分享《成长的烦恼》中的一段话：
 告诉大家一个秘密，很多企业快速膨胀的时候，那些中层为了自己的发展，快速扩张，快速启动新的项目团队，每个项目看上去都很有价值很有机会，然后大家都很忙碌很拼为了各种新的机会打拼，但是呢，其实从公司战略和格局来说，绝大部分都是实验品，甚至连实验品都不算，是领导暂时没功夫搭理的垃圾。等遇到市场风向逆转的时候，老板开始核查成本，这些乱七八糟的玩意，咔嚓嚓砍掉，你觉得不公平，你很拼很努力的为公司效力，你加班修改bug，解决线上问题，各种辛苦各种贡献，结果老板看了一眼，一文不值，真的是一文不值。
太多优秀的人才，在巨头公司里，连公司的核心价值和主要方向都看不清，在各种根本不重要的细枝末节里荒废了自己，最后在老板眼里一文不值。
 只有方向对了，速度才有意义。
其实在做事的时候，可以问一下自己几个问题：
 我找到或想到了哪些方向与方法吗？ 这些方法可以起作用吗？ 还有没有更好的方法（选项）？  借助这几个问题，可以继续追问，找到事情与问题的关键所在。
敏捷的行动 确定方向与方法后就是要行动。不然所有想法都是水中月，镜中花。这里自我批评一下，行动是我做的最差的一部分。
敏捷的行动分解为以下几点：
 不要等 试错 制定行动计划 迈出第一步 小步快行 轻装上阵 建立行动的正向循环 不断改进</description>
    </item>
    
    <item>
      <title>PoW过时了吗？</title>
      <link>https://blog.ipds.top/2019/01/12/pow%E8%BF%87%E6%97%B6%E4%BA%86%E5%90%97/</link>
      <pubDate>Sat, 12 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2019/01/12/pow%E8%BF%87%E6%97%B6%E4%BA%86%E5%90%97/</guid>
      <description>ETC受到51%攻击 最近ETC受到51%攻击，值得注意是：ETC是受到51%攻击的币种中市值最高的。 先谈谈ETC受到51%攻击原因。ETC采用PoW共识机制，现有PoW共识天然存在51%攻击的风险，真实发生ETC的51%攻击原因如下：
 由于ETC价格大跌，算力下降，降低了发起了51%攻击的成本 由于矿场存在，实现算力大规模的垄断，同时算力切换方便，为发起51%准备了客观条件  反想一下，ETC市值是前20名，那些小币种，山寨币们都是下一个待宰的羔羊。 连ETC都受到攻击，那么PoW过时了吗？
下面简单聊一下如何改善PoW。
如何改善PoW dPoW dPoW方案来自Komodo（大家自行google）。 其要点就是将一段时间内的交易hash发送到BTC，在这种情况下，如果要发动51%攻击需要达到攻击BTC的算力要求，提高了攻击成本。
第二算力有效原则 这个想法来源于第二价格密封拍卖，主要是为了打击算力竞争。
算力限制 限制算力过强的节点，避免算力的复制，聚集，从而导致垄断，保证算力的去中心化。关于算力限制的方案欢迎交流。
结合VRF 利用VRF的随机性，每次随机选择一批节点参与PoW。
扩展Work的内容 现在基本上所有的PoW都上纯计算，浪费大量的算力，这些算力都成为了沉没成本。发现不少项目将PoW中Work用于AI计算。
总结 PoW是一个伟大的共识创新，创造性地解决了拜占庭容错问题。PoW并没有过时，PoW会不断发展与改善。
参考  第二价格密封拍卖  欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>关于区块链共识的一些思考</title>
      <link>https://blog.ipds.top/2018/12/24/%E5%85%B3%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%B1%E8%AF%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
      <pubDate>Mon, 24 Dec 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/12/24/%E5%85%B3%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%B1%E8%AF%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
      <description>说明 前面写一篇关于分布式系统的文章，但是没有考虑拜占庭问题，所以聊聊区块链共识技术，在这个过程看看比特币是如何解决拜占庭问题和共识问题。
定义 区块链是什么？这个问题有太多的回答。
 区块链是一个由全体联网节点共同维护并持有同一账本的分布式数据库，它通过算法来达成共识，在无需信任的各节点中构建一个无单一故障点或控制点的去中心化可信系统
 所以在技术上区块链的本质是分布式帐本技术(DLT)。
重要性 Why Decentralization Matters这篇文章从互联网发展历程与面临问题说明去中心化重要性。
去中心化重要性来自去中心化带来的影响与作用，具体如下：
 去中心化可以降低垄断的可能性，是一种对抗垄断的重要方式 去中心化提供高可用性 去中心化对抗DDos 去中心化可以让人人参与，权力下放 去中心化是让数据归还用户，保护隐私的重要技术手段之一 去中心化消除中间环节，提高效率 去中心化与中心化并不是对立，可以相互补充 去中心化能够解决中心化无法解决的问题，如微信流控算法，并没有采用全局，而由节点根据延迟参数调整，另外是5G带来的高速传输与海量数据需要去中心化来来解决
  去中心化解决问题  提供全球开放的分布式数据 提供不可更改的数据库 提供trustless的基础设施 基于以上三点的业务的需求  思考模型 如同前面的分布式系统一样，对于公链（去中心化系统）问题，也可以分为以下几个子问题：
 在什么环境下？ 有哪些节点参与？ 通过什么样的共识算法？ 使什么业务？ 达成什么样的容错要求？  总结一句话：在什么环境下，有哪些节点参与，通过什么样的共识算法，使什么业务达成什么样的容错要求。
下面就这五个问题展开说明。
环境 大部分去中心化系统的环境要点如下：
 异步网络模型 网络结构是P2P网络 网络传输是不可靠的 系统异常是常态 并发 缺少全局时钟  (Ps:这里不展开说明了，谈谈对分布式系统的一些思考)
节点 节点准入方面  节点自由加入与退出 节点需要通过PoW测试才能加入 节点需要PoS持仓才能加入
 节点需要质押才能加入  节点角色  节点平等，无角色任何差异如比特币 节点分为超级节点，见证节点如EOS  节点数量  不限数量，如比特币，以太坊 指定数量，如EOS指定为21，steemit指定数量为11</description>
    </item>
    
    <item>
      <title>谈谈对分布式系统的一些思考</title>
      <link>https://blog.ipds.top/2018/12/11/%E8%B0%88%E8%B0%88%E5%AF%B9%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
      <pubDate>Tue, 11 Dec 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/12/11/%E8%B0%88%E8%B0%88%E5%AF%B9%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
      <description>说明 本文限定在分布式系统不考虑拜占庭问题。即所有节点都是可信的。
定义 分布式系统是多个节点协作完全一个共同的业务。
重要性 分布式理论的重要性毋庸置疑，一句话总结：没有分布式理论，就没有现在互联网与云计算。在分布式系统实践过程中离不开分布式系统理论指导，对其重要性打个比方：分布式系统理论是分布式系统实践过程中地图与导航。
分布式主要解决问题 分布式主要解决以下几个问题：
 解决SPOF问题，满足高可用性需求 解决Scale out问题，满足扩展性需求 解决数据分布问题，满足业务的需求  分布式是解决方案也是问题 一般情况，人们为了解决一个问题，往往会引入一个新的问题。试想如下： 由于SPOF存在，再加入一个节点作为备份。这样确实提高了系统高可用性，但是有以下新问题：
 如何检测节点状态？如何快速检测节点状态？ 如果检测主节点失败，备节点如何进行切换？ 主备节点如何同步数据？ 网络分化出现双主，如何避免与处理？  思考模型 对于分布式系统理论，分为以下几个子问题：
 在什么环境下？ 有哪些节点参与？ 通过什么样的共识算法？ 使什么业务？ 达成什么样的容错要求？  总结一句话：在什么环境下，有哪些节点参与，通过什么样的共识算法，使什么业务达成什么样的容错要求。
下面就这五个问题展开说明。
环境 分布式系统环境特点如下：
 从网络同步模型上分为同步网络，异步网络，半同步网络三种 系统异常是常态 网络传输是不可靠的 并发 缺少全局时钟  网络模型 同步网络是指网络带宽与延迟都是可以保证的。实际上现在IP网络都不属于这种，满足这种的网络是ATM网络（注意不是我们常见的提款机ATM）。
异步网络则是指网络带宽与延迟都不确定，在异步网络发送的报文会丢失。我们正在使用主的IP网络属于这种。
部分同步网络处于这两者中间。
异常 机器异常通常有以下几种情况：
 电源 机器元器件故障如内存，硬盘 操作系统故障 软件故障与程序bug 资源耗尽，如内存，CPU，硬盘空间，网络带宽等  网络传输不可靠 网络传输不可靠主要体现以下几个方面：
 丢包，传输成功不确定性 延时，延时时间不确定性 重传与报文重复 乱序  并发 如同操作系统中多线程并发，分布式系统多节点在并发。但是分布式系统的并不能像多线程上通过操作系统的锁机制来处理并发，在分布式系统实现一个锁比操作系统上难度大多了。
缺少全局时钟 一个人有一只表时，可以知道现在是几点钟，而当他同时拥有两只时却无法确定。分布式系统不同节点很难有相同的时钟。
节点 节点数量 节点数量，在实践过程中，至少两个，常见三个节点，部分情况五个节点。</description>
    </item>
    
    <item>
      <title>大型系统软件Comware研发总结</title>
      <link>https://blog.ipds.top/2018/12/05/%E5%A4%A7%E5%9E%8B%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6comware%E7%A0%94%E5%8F%91%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 05 Dec 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/12/05/%E5%A4%A7%E5%9E%8B%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6comware%E7%A0%94%E5%8F%91%E6%80%BB%E7%BB%93/</guid>
      <description>前言 前几个月写一篇关于研发管理的文章。在那篇文章提出一个简单的思考框架，并没有实际案例的分享及深度分析。所以在这里以华三Comware研发为例，结合思考框架谈谈自己的一些理解与想法。
Comware 开始之前，先介绍一下Comware。其主要要点如下：
 整个系统代码量超过了1000万行（开源代码除外） 巅峰时期开发人员1000左右 支持设备类型超过100多种，同时支持各种丰富的网络特性 性能与可用性要求高，需要满足欧美高端市场（金融，国防等）要求及互联网大流量的冲击 作为公司的中台，支撑公司绝大部分产业线（安全，路由，交换，云计算等）  下面我们就一一展开说明。
业务 以业务中心。Comware作为一个网络操作系统，主要要求如下：
 充当网络设备的大脑 承载各种网络业务，并动态满足不同网络业务的要求及变化 保证整个系统 高可用性，高性能，可维护性，可扩展性，安全性等  文化 由于历史上的原因，整个研发文化总体上源于华为，稍有调整。具体要点如下：
 质量为上 结果导向
 研发三权分立 追求效率 鼓励创新 公开  关于科技公司的文化，推荐Netflix文化:自由与责任
团队 团队是从人的视角出发。要以人为本啊。
团队梯队合理清楚，按技术水平划分具体如下：
 开发上岗人员 维护上岗人员 开发负责人 系统扩展组 系统组 架构组  团队组织划分以业务导向，按照不同的业务划分不同大组，独立进行代码管理。在各个大组一般分为开发与维护两个方面进行人员动态调配。
团队建设主要是大组每周定期培训，鼓励分享，除此之外针对不同岗位有专项培训，如项目管理，代码管理。
架构 架构不是我们常说的架构，这里的架导指导代码的工作（架构从事的角度出发）。
选择开源，拥抱开源，不要重复造轮子 不得不说2008年开始预研下一代网络操作系统，当时的团队放弃vxwork，选择了开源linux，而且作到取自开源，高于开源，只使用linux基本组件（文件管理系统，内存管理系统，进程调度等），重新移植与修改协议栈，实现分布式网络协议，扩张SOCKET类型。采用Linux好处多多，具体如下：
 充分吸引Linux开源精华 Linux开源发展路径，决定Linux便于改造与优化 与Linux一起升级，如内核2.6升级到4.x版本
 方便开源引入支持，如移植wireshark， python Linux在服务器大量应用，业界有大量人才  合法合规 合法就不用多说了。注意的是要考虑到不同的国家与地区的差异。 合规方法最近的例子就是2017年百度要求内部全面停止使用React/React Native。利用开源的Linux作为基础开发商业操作系统，就不得不遵守开源协议。
KISS原则 关于KISS原则，架构设计通用原则，有太多说明，这里不展开。
开放性 对外开放接口，如OAA（Open Application Architecture，开放应用架构），这样有以下好处：
 对公司内部来说，降低了耦合 对外部合作方来说，方便不同厂商系统集成 对客户来说，提供了更多的选择以及DIY能力 开放与释放了平台的能力  分层与分解 整个系统采用分层设计有如下优点：</description>
    </item>
    
    <item>
      <title>说说在不同行业的编程体验</title>
      <link>https://blog.ipds.top/2018/12/02/%E8%AF%B4%E8%AF%B4%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%A1%8C%E4%B8%9A%E7%9A%84%E7%BC%96%E7%A8%8B%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Sun, 02 Dec 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/12/02/%E8%AF%B4%E8%AF%B4%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%A1%8C%E4%B8%9A%E7%9A%84%E7%BC%96%E7%A8%8B%E4%BD%93%E9%AA%8C/</guid>
      <description>回想起来，2010年毕业以来，在五家公司呆过，经历四个行业，在这引起行业编程体验各有不同，总结起来就下面四句话：
嵌入式行业：面向DataSheet编程
通信行业：面向标准编程
互联网行业：面向变化编程
区块链行业：面向资金编程
欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>说说微信小程序</title>
      <link>https://blog.ipds.top/2018/12/01/%E8%AF%B4%E8%AF%B4%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sat, 01 Dec 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/12/01/%E8%AF%B4%E8%AF%B4%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</guid>
      <description>小程序在2018年确实火了，除了先行的微信小程序，后面紧接着跟着了蚂蚁金服的小程序，今日头条的小程序。这里先表明一下自己的立场，从微信小程序诞生开始我就看好微信小程序。这里肯定有人说我是事后诸葛亮，这里有图为证。
小程序让微信成为生活的操作系统 如同操作系统为应用程序提供内存资源与管理、进程资源与调度、输入与输出设备、网络传输、文件系统、用户交互等基本功能，微信生态为小程序提供了以下要素：
 用户 场景 商业基础设施，如微信支付，消息服务，基于微信社交的信任关系 这些大大降低商业成本和开发成本。  美团，微博，拼多多等公司都在微信上开发小程序， 体现了微信小程序上领先地位。
如何发现小程序的机会 有很多人利用小程序闷声发大财，那么怎样发现小程序的机会？发现小程序的方式有很多，这里分享其中一种：参考chrome网上应用店，当然也可以从ios app store上找到新的机会。 更多参考app，详见链接。
这么多分类了，从各个分类热门应用中可以找到一些启发。这里说明一下，这只是其中一种方式，还有很多其他的方式来挖掘小程序的机会。
欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>说说私钥保护技术</title>
      <link>https://blog.ipds.top/2018/10/21/%E8%AF%B4%E8%AF%B4%E7%A7%81%E9%92%A5%E4%BF%9D%E6%8A%A4%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sun, 21 Oct 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/10/21/%E8%AF%B4%E8%AF%B4%E7%A7%81%E9%92%A5%E4%BF%9D%E6%8A%A4%E6%8A%80%E6%9C%AF/</guid>
      <description> 前言 私钥在区块链系统中代表是什么？私钥是钱。钱包的本质就是私钥。谁控制了私钥谁就控制对应钱包的数字资产，谁丢失了私钥也就相当于丢了对应钱包的数字资产。
因此，在区块链系统中如何保护私钥一直都是重要的问题。
保护私钥一直都要解决以下问题：
 用户体验 私钥备份与存储 私钥安全（攻击、泄漏、盗取）  私钥助记词化 私钥数学本质是一串数字：
用户体验极差，那么一长串数字怎么记，每次使用都是一个大麻烦。 所有就有只要玩过数字货币的人都清楚的助记词。这一部分改进如同汇编对二进指定的优化。
私钥加密 对于私钥内容进行加密，最典型例子就是key-store。
共用私钥 这里面的技术主要是BIP-44。在数字货币钱包里面得到应用， 避免每一个数字货币地址都要维护一个私钥。如果数字货币满足BIP-44规范， 就可以通过一个私钥来控制多个钱包。
私钥隔离 用冷钱包来实现与网络隔离，避免私钥被盗取或泄漏。
私钥分片 私钥分片主要采用Shamir&amp;rsquo;s Secret Sharing技术。其技术原理如同藏宝图分成好几分份,这是多少电影与电视剧中出现的情节。
参考  Shamir&amp;rsquo;s Secret Sharing
 Divide and Manage Secret Data Securely With Shamir&amp;rsquo;s Secret Sharing zeropass Threshold Signatures: The Future of Private Keys  </description>
    </item>
    
    <item>
      <title>数字货币交易所安全体系-资产篇</title>
      <link>https://blog.ipds.top/2018/10/19/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E4%BA%A4%E6%98%93%E6%89%80%E5%AE%89%E5%85%A8%E4%BD%93%E7%B3%BB-%E8%B5%84%E4%BA%A7%E7%AF%87/</link>
      <pubDate>Fri, 19 Oct 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/10/19/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E4%BA%A4%E6%98%93%E6%89%80%E5%AE%89%E5%85%A8%E4%BD%93%E7%B3%BB-%E8%B5%84%E4%BA%A7%E7%AF%87/</guid>
      <description>前面，简单介绍了数字货币交易所的安全体系，这一篇主要说说一下资产安全的一些要点。
如果将一条公链比作一个银行的话，当然这个银行是去中心化银行，那个各个交易所的节点就相当于银行的网点。这个节点有以下功能：
 帐本数据同步 用户资产托管 充币与提币  资产安全主要分为以下几个方面展开说明，具体如下：
意识 意识，意识，意识！其实意识就是一种天赋，只是我们没有注意到吧。
有些区块链的项目居然不知道私钥是何物。很多人会说这是不是搞技术不知道而已。 其实这是安全意识不到位。
意识教育与培养一定要先行。
帐本数据同步 帐本数据主要是节点数据同步，具体关注点如下：
 节点连接节点的确认 避免站错队 分叉 重放攻击防护 孤块 网络分化 帐本同步节点故障，多节点备份  资产托管 资产托管的核心就是私钥，要点如下：
 采用冷钱包管理私钥 热钱包管理策略（存活周期，资金金额控制，密钥管理） 私钥存储管理（多人多份多地） 多地址分散（不要把鸡蛋放在一个篮子里）  充币与提币 充币与提币都是有关托管资产的交易。
 合理的交易确认数 充币提币的用户验证 交易的不确定性处理办法如交易得不到确认 分叉时关闭充提币功能  监控 资金动向监控也是不可或缺的，要点如下：
 对首次提币地址及用户监控 保证监控的高可靠性 充币与提币数据分析 大额充提币的监控及确认  差异化 对于不同类型的资产需要具体问题具体分析。 如以太坊专门对基于智能合约的数字资产进行审计与防范，具体参考ERC20，这里不展开。
后记 对于资产安全，有什么新的想法与意见，欢迎交流！
欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>安装与应用Prometheus监控Kubernetes集群</title>
      <link>https://blog.ipds.top/2018/10/17/%E5%AE%89%E8%A3%85%E4%B8%8E%E5%BA%94%E7%94%A8prometheus%E7%9B%91%E6%8E%A7kubernetes%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Wed, 17 Oct 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/10/17/%E5%AE%89%E8%A3%85%E4%B8%8E%E5%BA%94%E7%94%A8prometheus%E7%9B%91%E6%8E%A7kubernetes%E9%9B%86%E7%BE%A4/</guid>
      <description>安装Prometheus RBAC设置,获取创建集群角色权限 ACCOUNT=$(gcloud info --format=&#39;value(config.account)&#39;) kubectl create clusterrolebinding owner-cluster-admin-binding \ --clusterrole cluster-admin \ --user $ACCOUNT  注意：如果集群部署在google cloud上需要先执行这一步。
创建Namespace kubectl create namespace monitoring  创建角色 脚本内容如下：
apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRole metadata: name: prometheus rules: - apiGroups: [&amp;quot;&amp;quot;] resources: - nodes - nodes/proxy - services - endpoints - pods verbs: [&amp;quot;get&amp;quot;, &amp;quot;list&amp;quot;, &amp;quot;watch&amp;quot;] - apiGroups: - extensions resources: - ingresses verbs: [&amp;quot;get&amp;quot;, &amp;quot;list&amp;quot;, &amp;quot;watch&amp;quot;] - nonResourceURLs: [&amp;quot;/metrics&amp;quot;] verbs: [&amp;quot;get&amp;quot;] --- apiVersion: rbac.</description>
    </item>
    
    <item>
      <title>基于Gitlab&#43;Kubernetes实现CI/CD</title>
      <link>https://blog.ipds.top/2018/10/16/%E5%9F%BA%E4%BA%8Egitlab-kubernetes%E5%AE%9E%E7%8E%B0ci/cd/</link>
      <pubDate>Tue, 16 Oct 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/10/16/%E5%9F%BA%E4%BA%8Egitlab-kubernetes%E5%AE%9E%E7%8E%B0ci/cd/</guid>
      <description>要求 基本技术栈要求如下：
 Golang Docker GitLab Kubernetes  具体原因参考关于技术选型的思考
步骤 创建Kubernetes集群 自己搭建集群也可以，但是投入生产不建议使用。这里直接使用google cloud(调研几家发现G家这方面技术积累最深，生态完整)。
创建帐号设置gitlab操作帐号，用于后面的CI/CD操作。
kubectl apply -f gitlab-admin-service-account.yaml  kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk &#39;{print $1}&#39;)  具体参考Adding and creating a new GKE cluster via GitLab
创建DockerHub帐号 主要操作是在DockerHub创建帐号。 其他的云计算服务的镜像服务也可以。
创建gitlab项目 正常创建代码仓库操作。
准备代码 准备一个简单的web服务器。
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; ) func main() { http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) { fmt.</description>
    </item>
    
    <item>
      <title>数字货币交易所安全防护体系介绍</title>
      <link>https://blog.ipds.top/2018/10/15/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E4%BA%A4%E6%98%93%E6%89%80%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E4%BD%93%E7%B3%BB%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 15 Oct 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/10/15/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E4%BA%A4%E6%98%93%E6%89%80%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E4%BD%93%E7%B3%BB%E4%BB%8B%E7%BB%8D/</guid>
      <description>说明 这里的交易所是指中心化交易所。下面按标题三个关键词展开说明。
交易所 交易所作为数字资产交易的平台。一直不断地就有安全问题出现，最著名的是Mt. Gox事件，影响恶劣。后续事故也不少，不多说了。交易所安全事故这只黑天鹅未来一定会再出现。
安全防护 安全的重要性毋庸置疑。
安全防护是全方位，多角度，多层次，全链路，持续不断的一种工程。
安全防护的结果是安全性。其主要取决于攻守双方。只有知道工作原理才能掌握如何防护。 安全防护从一开始就要考虑及落地而不是临时抱佛脚。
体系 针对交易所安全体系，分为以下几个方面：
 资产安全 平台安全 网络安全 用户安全 数据安全 交易安全 运营安全 安全策略  对于这8个方面，先挖坑，后面再填，有空的话一一展开说明。
参考  Exchange Security Report  欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>关于技术选型的思考</title>
      <link>https://blog.ipds.top/2018/09/05/%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Wed, 05 Sep 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/09/05/%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>技术选型内容 技术选型从组成要素的角度分为两大类：
 实现业务的代码 业务依赖的服务  本文围绕代码这一核心进行技术选型，对此分解以下五个问题：
 怎么管理代码？ 用什么语言写代码？ 怎么运行代码？ 在哪里运行代码？ 怎么大规模运维代码？  技术选型原则 简单总结为以下几点：
 稳定优先，善用为上 立足现状，着眼未来 验证先行，应用在后 业务导向，实践驱动  下面就根据这些原则一一回答上面五个问题，但是不会涉及具体的问题如消息队列是选RabbitMQ还是Kafka。
代码管理 对应上面的怎么管理代码的问题。首先是工具，现在大家都清一色的git。在git没有出来之前有以下这些工具：
 clearcase svn TortoiseCVS  再次就是选择平台。有以下选项
 github gitlab gitee gitbucket 自建gitlab
  选择自建gitlab。主要考虑如下：
 历史原因 Gitlab自带CI 代码安全考虑 自建gitlab带来的自主控制，有利于后续的发展  编程语言 以Golang为主，其他语言为辅助。
Why Golang  个人及其团队主要成员都有Golang经验 Golang在区块链项目中会占主导地位 更多理由见：Golang最工程化的语言  运行环境 运行环境分为以下几种：
 物理主机 虚拟机 Docker  除了一些特殊的场景，现在流行的作法当然是Docker。
Why Docker Docker是容器的事实上标准。 使用Docker带来新部署方式：build-&amp;gt;ship-&amp;gt;run，有以下好处：
 可移植性：容器与操作系统分离，基本上保证可以在不同的机器及环境的主机上运行，容器也可以在不同机器上迁移 模块化：利用容器隔离属性可以划分模块，合理拆分服务，同时容器化的一致性便于模块的复用 安全性：容器隔离属性增加了应用程序的安全性 弹性伸缩：容器化方便在负载增加扩容，在负载下降时缩容，有利于提高资源利用效率 一致性：容器为应用程序提供了一致性的运行环境。  运行平台 上云现在已经成为大众共识。AWS，azure, google cloud, aliyun及腾讯云都是选项内容。</description>
    </item>
    
    <item>
      <title>关于拼多多几点看法</title>
      <link>https://blog.ipds.top/2018/07/29/%E5%85%B3%E4%BA%8E%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%87%A0%E7%82%B9%E7%9C%8B%E6%B3%95/</link>
      <pubDate>Sun, 29 Jul 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/07/29/%E5%85%B3%E4%BA%8E%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%87%A0%E7%82%B9%E7%9C%8B%E6%B3%95/</guid>
      <description>拼多多战略采用农村包围城市，市场上定位准确，填补了三四线农村及中国底层人民的需求。 微信平台是拼多多快速成长的关键，利用微信带来的流量，流量带来用户，用户带来交易，交易带来商家，随着流量，用户，交易，商家越来越多，就成了生态。 宣传口号具有极强的传播效应：拼多多、拼得多、省得多。 产品上增加确定性，首先价格比淘宝还便宜（一般情况下）同时对用户预期进行管理，提高了体验的确定性。 麻烦就是与淘宝一样，会一直受假货的困扰，打假一直是电商平台的难题（因为打假是一个社会问题）。 拼多多胜在效率，对于用户来说是性价比，对于商家来说是批量处理商品，在交易流程上利用微信平台及其天然存在好友关系及其微信群，整个过程商家和用户的成本都下降，在性价比的高吸引下，用户拼单成本低（转发几个微信群或者朋友圈就可以了），商家的流量成本基本为0。 拼多多未来会怎么样？在整个中国大部分人消费降级情况下，拼多多应该还会进一步增长，上市当天上涨40%也是市场对其成长的期待。 拼多多和淘宝比较如何？借助微信拼多多下沉市场更大，借助微信拼多多是社交电商，更具有传播性。 拼多多为什么成长这么快？三年时间就上市，用户数量达到3.4亿。搭上微信这个10亿用户平台，符合大部分中国人还很穷的现状，解决他们的问题。 拼多多怎么赚钱？现在还没有营利，主要收入来源是商家的在线营销服务（广告），未来应该会营利，用户数量巨大，可以从天猫，京东导入更多的商家，扩大收入，相信国运，这些用户未来会真正的消费升级，这又是新的增长机会。  参考  巨头夹缝中的千亿鲶鱼：社交重塑中国电商格局，拼多多成电商第三极 拼多多急上市：拿下1400亿GMV，累积亏损13亿 巨头三国杀：中国电商盛世再临  欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>区块链开启游戏的新时代</title>
      <link>https://blog.ipds.top/2018/07/21/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%90%AF%E6%B8%B8%E6%88%8F%E7%9A%84%E6%96%B0%E6%97%B6%E4%BB%A3/</link>
      <pubDate>Sat, 21 Jul 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/07/21/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%90%AF%E6%B8%B8%E6%88%8F%E7%9A%84%E6%96%B0%E6%97%B6%E4%BB%A3/</guid>
      <description>自2008年比特币诞生以来，其代表的区链技术的发展程度令人兴奋，区块链很快就成为日常生活中的流行语。特别是对于游戏行业，区块链能够带来新的游戏互动和体验方式，这种互动和体验方式有如下三个特点：
 玩家成为利益相关者 公正透明 大规模协作  下面对这三个特点分别说明：
玩家成为利益的创造者与参与者 Play2Live平台是互动功能和货币化工具的独特组合。这项针对视频广播游戏和网络体育内容的服务允许每个参与者赚取收益，包括流媒体服务商和普通观众。
公正透明 传统的游戏，由后台产生随机数，存在作假等各种暗箱操作。 有这么一款游戏：Piggy Breaker，他们是blockchain hero活动的胜利者，通过基于&amp;rdquo;可证明的公平&amp;rdquo;原则以透明的方式产生游戏中的随机性，解决了部分透明度问题。确保游戏的公平性。同时避免出现了平台跑路的潜在问题。另一个最典型的例子是中本聪筛子。
大规模协作 依赖于P2P网络，可以提供去中心化协作。但是也存在一些问题，如去中心化网络的带来的延迟问题，适合策略性游戏。
欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>Golang最工程化的语言</title>
      <link>https://blog.ipds.top/2018/07/03/golang%E6%9C%80%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9A%84%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Tue, 03 Jul 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/07/03/golang%E6%9C%80%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9A%84%E8%AF%AD%E8%A8%80/</guid>
      <description>Golang是什么语言 PHP是最好的语言。
Haskell最难学的语言。
Golang最工程化的语言。
下面分别从语言层面及软件工程两个方面进行说明。
语言 安全性 相比较于C/C++，golang不支持指针操作，不支持隐式类型转换，支持内存溢出与越界检查。
并发与扩展 通过goroutine，Golang从语言层面上解决了并发与扩展的问题，而不像C/C++, JAVA通过框架来解决这个问题。Golang自适应多核运行。
简单 语法简单，代码不涉及内存管理，上手容易。新人学习几天就可以上手写代码。
可维护性 自带godoc统一代码格式。 一个文件夹对应一个包有利于代码模块化。
打包一切 相比较于C/C++，动态库和静态库的依赖，Golang将所有编译成一个二进制文件。 解决依赖带来高度耦合问题，这样十分有利于交付与部署。
可移植 支持多种体系架构与不同的操作系统以及跨平台编译。
高效率 Golang实现了程序员开发高效率与机器运行高效率两者的有效结合，进而实现经济上高效率。
相比较于C/C++，Golang编译速度更快了。特别是大型项目，以前用C语言的时候，在刀片服务器上时编译一个测试版本都要半个小时左右。
生态成长 背靠Google，从09年发布已来，已经在云生态占据绝对主导地位。有不少明星开源项目。如Docker、Kubernetes、Prometheus、Hyperleder、Ethereum、Etcd等。随着云时代不断发展，Golang生态一定会越来越强大与丰富。
软件工程 流程 一般软件工程流程分为规划、需求、设计、编码、测试、发布、维护等几个阶段。除了规划与需求阶段，Golang对其他阶段在语言层面都有强力特性支持。举例如下：
 设计阶段：利用interface可以进行protype编程，可以实现代码及文档。 编码阶段：godoc统一代码格式 测试阶段：自带go test便于测试，不像C/C++依赖gtest 发布阶段：上面说到可移植及打包一切，便于交付，发布，部署 维护阶段：Golang天然支持CPU扩展及其上面所说的便于交付，发布，部署  大规模协作 Golang引入interface特性，实际在语言层面支持SOLID设计原则中依赖倒置原则。再加上包的独立性，有利于大规模系统的大团队协作开发。
编程友好 软件工程是人是关键因素。编码是核心阶段。Golang以下特性释放了程序员的生产力：
 还算丰富的基础库 避免内存管理 天然支持并发  后记 当然Golang也有自己的缺点，如GC问题，延时大等。但是用一个语言的策略就应该扬长避短，当然熟练应用Golang的特性得深入学习与实践。
(End)
欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>IPFS专题</title>
      <link>https://blog.ipds.top/2018/06/21/ipfs%E4%B8%93%E9%A2%98/</link>
      <pubDate>Thu, 21 Jun 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/06/21/ipfs%E4%B8%93%E9%A2%98/</guid>
      <description> 前言 IPFS（包括filecoin）无论从技术视角还是商业视角都有很多有意思的内容（关键是自己很看好这个技术），所以要准备搞一个IPFS专题。
文章  IPFS与下一代网络安全 下一代互联网基础：IPFS.pdf  动态  Filecoin 2017 Q4 Update Filecoin 2018 Q1 &amp;amp; Q2 Update  参考  ipfs filecoin  </description>
    </item>
    
    <item>
      <title>关于微软收购github几点看法</title>
      <link>https://blog.ipds.top/2018/06/10/%E5%85%B3%E4%BA%8E%E5%BE%AE%E8%BD%AF%E6%94%B6%E8%B4%ADgithub%E5%87%A0%E7%82%B9%E7%9C%8B%E6%B3%95/</link>
      <pubDate>Sun, 10 Jun 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/06/10/%E5%85%B3%E4%BA%8E%E5%BE%AE%E8%BD%AF%E6%94%B6%E8%B4%ADgithub%E5%87%A0%E7%82%B9%E7%9C%8B%E6%B3%95/</guid>
      <description>开源已经是一种潮流与趋势。从linux开始，开源软件支撑现在的互联网与云计算。有太多的项目如redis，docker，k8s，etcd等等；区块链领域更是如此。 得开发者得天下。github上有最多的开发者和开发项目。 代码管理平台的重要性凸显。 估计google会在未来收购gitlab。 github找到微软爸爸，服务体验会有改善（如国内下载代码慢）。 github大量的开源代码会成为AI编程的学习材料，未来CRUD可能由AI来完成了。 未来人人都是开发者。随着教育的发展，编程肯定是每个人的必修课。这样github会成为代码管理的操作系统。 github与vscode会有深度集成，提高开发效率与体验。 github与azure集成，提供一站式开发服务。  参考  收购 GitHub，微软的又一次大转变  欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>浅谈随机</title>
      <link>https://blog.ipds.top/2018/06/08/%E6%B5%85%E8%B0%88%E9%9A%8F%E6%9C%BA/</link>
      <pubDate>Fri, 08 Jun 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/06/08/%E6%B5%85%E8%B0%88%E9%9A%8F%E6%9C%BA/</guid>
      <description>随机是一个十分有意思的问题。
随机是一种选择方式 生活中最常见的例子就有这些：
 抽签 抽奖 抛硬币  随机是一种隐藏方式 同样拿抽奖为例，将少量的中奖者隐藏在抽奖参与者中。从概率论的角度上看就是将分子隐藏分母当中。
随机是一种分散方式 典型的例子就是随机数，避免产生的数据集中；除此之外Markov链实现一种离散时间随机过程。
随机是一种达成共识的方式 还拿抽签为例，这种方式是我们达成共识的一种重要的低成本且公平的共识方式，具体如下：
 比赛过程中通过抽签解决出场顺序 家里贫穷时，有多个读书的，通过抽签来决定的
  随机是一种降低冲突的方式 随机带来的分散性，可以帮助解决冲突，例如raft协议在选leader过程中通过随机来避免多个候选者同时竞争leader的情况出现。
随机是一种保护与安全方式 一滴水只有放进大海才永远不会干涸。在Algorand中通过VRF保护记账节点，将记帐节点隐藏在于众多节点当中。在数字货币钱包利用随机性生产私钥来保护私钥；除了这些以外，更多随机数在在区块链有许多利用随机来保证公链安全的应用，可以参考这篇文章区块链中的随机数
随机是一种需求 小道消息的抽奖助手将随机这一需求产品化。
小结 总之，随机在生活中无处不在。随机以上用途来自随机的不确定性。随机的本质是不确性。 随机当中还有很多可以挖掘的认识与理解。
参考  随机性 一文搞懂HMM（隐马尔可夫模型）  欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>以太坊交易池分析</title>
      <link>https://blog.ipds.top/2018/05/15/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%BA%A4%E6%98%93%E6%B1%A0%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 15 May 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/05/15/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%BA%A4%E6%98%93%E6%B1%A0%E5%88%86%E6%9E%90/</guid>
      <description>简介 以太坊交易池有以下功能：
 缓存交易 清理交易 实现交易gasPrice竞价功能 配合出块，提供打包交易 交易查询  配置 配置描述 geth中用数据结构TxPoolConfig描述交易池配置，具体如下：
// TxPoolConfig are the configuration parameters of the transaction pool. type TxPoolConfig struct { NoLocals bool // Whether local transaction handling should be disabled Journal string // Journal of local transactions to survive node restarts Rejournal time.Duration // Time interval to regenerate the local transaction journal PriceLimit uint64 // Minimum gas price to enforce for acceptance into the pool PriceBump uint64 // Minimum price bump percentage to replace an already existing transaction (nonce) AccountSlots uint64 // Minimum number of executable transaction slots guaranteed per account GlobalSlots uint64 // Maximum number of executable transaction slots for all accounts AccountQueue uint64 // Maximum number of non-executable transaction slots permitted per account GlobalQueue uint64 // Maximum number of non-executable transaction slots for all accounts Lifetime time.</description>
    </item>
    
    <item>
      <title>乱扯研发管理与领导</title>
      <link>https://blog.ipds.top/2018/05/05/%E4%B9%B1%E6%89%AF%E7%A0%94%E5%8F%91%E7%AE%A1%E7%90%86%E4%B8%8E%E9%A2%86%E5%AF%BC/</link>
      <pubDate>Sat, 05 May 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/05/05/%E4%B9%B1%E6%89%AF%E7%A0%94%E5%8F%91%E7%AE%A1%E7%90%86%E4%B8%8E%E9%A2%86%E5%AF%BC/</guid>
      <description>前言 优秀的技术人员与技术管理人员会一直紧缺。一个好的技术管理人员应该有自己的管理及领导指导原则。（Ps：最近在读《原则》这本书，深受其影响，虽然已经有很多人在推荐，这里再推荐一下，这本书真的值得一读。） 结合个人的工作经历与思考，提出自己对研发管理与技术领导的一些原则性思考。
基本原则 具体如下图所示：
以业务为中心，从文化，团队，代码，架构四个方面进行出发思考。用一句简单总结一下就是：在先进的文化氛围下，精英团队在科学的架构指导以业务为中心开展各项代码工作（需求，设计，开发，测试，部署，升级）。
这是一个前进的方向及指导的框架，至于具体的落地需要按阶段与范围的践行。（Ps：中国改革开放40年在遵循一个中心，两个基本点的指导原则下，使中国经济发展取得翻天覆地的巨大变化。）
欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>以太坊提交交易流程分析</title>
      <link>https://blog.ipds.top/2018/05/05/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8F%90%E4%BA%A4%E4%BA%A4%E6%98%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 05 May 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/05/05/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8F%90%E4%BA%A4%E4%BA%A4%E6%98%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>说明 代码基于go-ethereum，版本v1.8.10。
RPC代码入口 SendTransaction
// SendTransaction will create a transaction from the given arguments and // tries to sign it with the key associated with args.To. If the given passwd isn&#39;t // able to decrypt the key it fails. func (s *PrivateAccountAPI) SendTransaction(ctx context.Context, args SendTxArgs, passwd string) (common.Hash, error) { if args.Nonce == nil { // Hold the addresse&#39;s mutex around signing to prevent concurrent assignment of // the same nonce to multiple accounts.</description>
    </item>
    
    <item>
      <title>社交网络摆脱不了的周期</title>
      <link>https://blog.ipds.top/2018/05/05/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E6%91%86%E8%84%B1%E4%B8%8D%E4%BA%86%E7%9A%84%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Sat, 05 May 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/05/05/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E6%91%86%E8%84%B1%E4%B8%8D%E4%BA%86%E7%9A%84%E5%91%A8%E6%9C%9F/</guid>
      <description>没有什么是不可改变的。
Facebook有22亿用户。
MySpace曾经是世界之王。现在人们都已经遗忘了。
QQ还是让位微信，活跃度下降，用户时长下降。
问题来了，在哪些情况下周期会到了？个人认为以下三种情况大概率会发生。
 变得讨厌，用户会逐渐抛弃，人人网就是一个例子 有更好的替代品的时候，如MySpace被facebook取代 技术变革，犹如地球进入冰川时代，巨无霸的恐龙都灭绝了，典型的例子是进入移动互联网时代，微信取代了QQ  那么问题又来了，微信的周期什么时候会到？这个意淫一下，回答如下：
 当穿戴时代到来的时候，手机被抛弃的时候，这个未来十年应该不会发生的 当微信的社交关系由于数据库维护，变成了由生物特征维护的时候，这个主要是冲击是用户同用户之间建立连接的方式变了  这只是个人的胡乱猜想，微信的未来我是看好，微信也是不断的进化，微信现在已经变成一个有10亿用户的生活操作系统。Windows都用了40多年，现在还是大量(PC并没有被淘汰)使用中，相信微信也不会例外。但是手机的操作却不是Windows，未来充满变化与不确定性。</description>
    </item>
    
    <item>
      <title>为什么BFT要求诚实节点数量大于总节点的三分之二</title>
      <link>https://blog.ipds.top/2018/03/23/%E4%B8%BA%E4%BB%80%E4%B9%88bft%E8%A6%81%E6%B1%82%E8%AF%9A%E5%AE%9E%E8%8A%82%E7%82%B9%E6%95%B0%E9%87%8F%E5%A4%A7%E4%BA%8E%E6%80%BB%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%89%E5%88%86%E4%B9%8B%E4%BA%8C/</link>
      <pubDate>Fri, 23 Mar 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/03/23/%E4%B8%BA%E4%BB%80%E4%B9%88bft%E8%A6%81%E6%B1%82%E8%AF%9A%E5%AE%9E%E8%8A%82%E7%82%B9%E6%95%B0%E9%87%8F%E5%A4%A7%E4%BA%8E%E6%80%BB%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%89%E5%88%86%E4%B9%8B%E4%BA%8C/</guid>
      <description> 相信很多人都知道，BFT(Byzantine fault tolerance)要求诚实节点数量大于总节点的三分之二。
为什么会有这个要求？
多数派原则 多数派原则在分布式系统很常见，即确保网络分化情况下的决议唯一。其原理是，假如节点总数是2f+1，那么一项决议得到多于f个节点赞成则获得通过。leader选举中，网络分化下，只有具有多数派节点的部分才可能选出leader。多数派还可以用于副本管理，根据实际情况调整写副本数和读副本数，在可靠性和性能之间取得平衡。 在分布式系统，无论paxos，还是raft，以投票来达成共识，在整个达成共识的过程中都遵守多数派原则。
下面先看多数派原则在raft中应用。
raft 假定f表示系统同时允许最大故障节点数量(f节点数量决定了系统可用性的概率)，在这种情况下，根据多数派原则，那么正常节点至少为f+1，即可以得出系统总节点数为2f+1。
BFT 在Raft协议中假设所有节点都是诚实节点，而在BFT假定系统存在一些作恶节点。 那么一个BFT中最多允许有多少个作恶节点？
进行逆向思考如下：
假如系统有f个作恶节点，那么在多数派系统，不作恶节点至少有f+1个。 f+1节点能够满足吗？不可以，网络分区是一直都存在，结合raft上，那么不作恶节点至少为2f+1，从而可以得出总节点数3f+1个。
参考  漫谈分布式系统、拜占庭将军问题与区块链  </description>
    </item>
    
    <item>
      <title>矿工五宗罪</title>
      <link>https://blog.ipds.top/2018/03/08/%E7%9F%BF%E5%B7%A5%E4%BA%94%E5%AE%97%E7%BD%AA/</link>
      <pubDate>Thu, 08 Mar 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/03/08/%E7%9F%BF%E5%B7%A5%E4%BA%94%E5%AE%97%E7%BD%AA/</guid>
      <description> 比特币生态 比特币生态有以下几个角色：
 比特币核心开发者，他们开发与更新比特币技术, 负责开发与维护代码 矿工们，运行区块链技术与算力保证，负责执行代码 交易所，比特币网络的IO,为整个网络的运行提供外部价值的IO  其中矿工有以下五宗罪，具体如下：
IFO帮凶 从BCH开始，一时间多少IFO兴起，任何一个IFO背后都有矿工的支持。
自私挖矿 这是矿工之间的作恶。
滥用打包权 此路是我开，要想过此路，留下买路财。 表现如下：
 某矿池提供的交易加速器服务 明明可以打包1000条交易，实际只打一个交易  竞价排名 这个争议如同百度的竞价排名。
算力集中与垄断 用图说话，前五位矿池的算力超过了51%。 小结 虽然比特币的生态系统有这些bug，也不能否认矿工的在比特币生态中的作用， 如同社会中在保证劳者有所，得能者多得。
参考  全球算力分布   </description>
    </item>
    
    <item>
      <title>从痛点，爽点，痒点看区块链</title>
      <link>https://blog.ipds.top/2018/03/04/%E4%BB%8E%E7%97%9B%E7%82%B9%E7%88%BD%E7%82%B9%E7%97%92%E7%82%B9%E7%9C%8B%E5%8C%BA%E5%9D%97%E9%93%BE/</link>
      <pubDate>Sun, 04 Mar 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/03/04/%E4%BB%8E%E7%97%9B%E7%82%B9%E7%88%BD%E7%82%B9%E7%97%92%E7%82%B9%E7%9C%8B%E5%8C%BA%E5%9D%97%E9%93%BE/</guid>
      <description>说明 希望通过痛点，爽点，痒点的分析，看看区块链是不是刚需？区块链在哪些场景下有迫切的需求？
首先，先看看下面三个定义：
 痛点就是恐惧
 爽点是即时满足 痒点是满足虚拟自我  （PS:上述三个定义来自产品大神梁宁的《产品思维30讲》）
痛点 1. 数据共享 具体场景如下：
 银行征信数据共享，但是不想暴露原始数据  2. 隐私保护 具体场景如下：
 大数据“杀熟”不“杀生”，你还敢愉快地买买买吗 医疗数据共享，但是担心在共享过程中出现患者的隐私泄漏？  3. 财富配置 典型的就是比特币，抗通胀需求，防止财富在法币大量放水的情况下被稀释(虽然价格变动大)，同时也是一种新形式的财富配置方式。
4. 信任 这里举一个失出信任的反面例子。自从三鹿奶粉事件，国产奶粉失出了国内民众的信任，所以贝因美的商业悲剧：卖29套房都无法填补亏损！又一巨头陨落。 贝因美是否可以通过区块链重新得到国内的民众的信任。
5. 内容保护 现在技术与产品还不成熟，如果有哪一家解决了内容保护内容，相信很多的内容创造者会投身该平台上。
6. 去中心化信任 基于区块链的赌博等应用。
爽点 1. 减少欺诈 这里主要利用区块链不可篡改，公开帐本特性，具体应用主要如下：
 存证 溯源  2.降低成本，提高效率 主要场景如下：
 迅雷网心通过玩客云可以提供低成本的CDN服务 通过比特币进行跨国转帐 Filecoin等类似项目 基于区块链共享项目 PowerLedger  3. 全球化 全球化，这就意味着潜在用户是60亿。这种威力如何？想想以太坊吧，从2015年上市，短短两年多市值最高突破1000亿美元，再拿出百度作个对比，百度成立于1998年，迄今为止百度的市值从没有突破过1000亿美元吧。
4. 抗监管 比特币的市场就说明一些人的特定需求，如大家都懂的洗钱等等
痒点 1. ICO 如果在国内不禁止，估计有更多的人投入到ICO中，为什么呢？ICO前期造富运动，满足很多人对一夜暴富的强烈愿望。
个人能力有限加上区块链应用领域十分广泛，上面并没有一一俱到，不足与错误欢迎指正。(PS: 币圈一日，世上一年，更有各种新技术层出不穷，需要深入学习，恕没有展开说明，更多应用参考下图)
(To be continue)</description>
    </item>
    
    <item>
      <title>USDT FAQ</title>
      <link>https://blog.ipds.top/2018/02/25/usdt-faq/</link>
      <pubDate>Sun, 25 Feb 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/02/25/usdt-faq/</guid>
      <description> USDT可信吗？ 技术上可信，但是取决于背后公司的实力背书。更多可以参考reddit 讨论
从现在的情况USDT并不可信，长期持有USDT有风险。
USDT发行是可控吗？ USDT发行泰达公司掌握，缺少有效监管与审计。这样会导致USDT与美元的准备金并不是1：1，很有可能是1：0.1。
USDT有什么风险？ 存在一定的风险，参考钱宝。
USDT为什么会有小幅波动？ 这个其实我也不知道。 不知道那就只能猜了，个人猜测如下： 猜测之下，首先需要了解USDT的价格等于美元准备金之和除以USDT总量之间。 由于买入USDT与卖出USDT并不是在同一个交易中完成，分别在不同的交易的完成。 波动存在原因是买入USDT与卖出USDT并不是平衡。 小幅波动是因为上面的不平衡占整个USDT总量的比例极小。
USDT对比特币有什么影响？  寄生在比特币之上 抢占比特币有限的交易速度 为比特币提供了法币的通道 为矿工提供了矿工费来源 破坏了比特币专注于支付网络的初衷 增长了帐本的空间 USDT可能存在钱宝一样的风险，如果USDT出现信用崩溃，那整个数字货币市场会出现一个不小的窟窿，城门失火，殃及池鱼  USDT会崩溃吗？ 在以下情况下存在这种可能：
 数字货币市场大量数字货币提现美元，冲击Tether准备金 公司跑路 USDT大量的需求，但是背后的公司不能做到1：1准备金 缺少有效地监管，各种不合规操作  USDT的交易成本？ USDT的交易实际是一次比特币交易，以gate.io为例，买入USDT收取了费用，提取USDT收取了一定费用。
USDT在交易所交易是否会收费？ 在交易所交易并没有进行真正的比特币转帐，而由交易所按照比例（如0.1%）收取双方交易费。
怎么降低USDY交易费用？ 减少买入或提现次数。作好计划与安排，一次尽可能多地买入或提取。
USDT是怎么赚钱呢？ 提供了法币之间的通道，充当稳定等价物，在买入与卖出中收取费用。
参考  USDT 幕后团队公频录音曝光：承认欺诈，涉嫌超发和操纵市场 重磅调查：危险的USDT丨钛媒体深度  </description>
    </item>
    
    <item>
      <title>USDT背后的技术原理</title>
      <link>https://blog.ipds.top/2018/02/22/usdt%E8%83%8C%E5%90%8E%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 22 Feb 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/02/22/usdt%E8%83%8C%E5%90%8E%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/</guid>
      <description>OP_RETURN 在进入正题前，我们需要了解比特币脚本OP_RETURN。
OP_RETURN是比特币0.9版本引入支持一种新的操作符，目的是允许开发者在交易上输出增加40个字节自定义的非交易数据。更多详细信息参考OP_RETURN wiki
USDT USDT又名Tether，通过Tether提供1：1美元兑换服务，为法币与数字货币提供兑换服务。 国内交易所关闭后，国内玩币的人都知道，这里不过多介绍。
架构 各层介绍如下：
比特币区块链层，主要实现Tether分布式帐本功能。Tether交易信息通过OP_RETURN保存在比特币的分布式帐本中。
Omni协议层，Omni协议层主要功能如下： 1. 创建与销毁USDT 2. 提供OmniApi 3. 跟踪Tether流通，通过Omnichest.info提供区块链浏览器功能 4. 支持用户交易与保存Tether(USDT)
Tether业务层，Tether业务层主要功能如下： 1. 法币兑换Tether(USDT) 2. Tether(USDT)兑换法币 3. 监管流通中Tether(USDT)
流程 这里与普通交易所的流程类似。法币兑换USDT，发放相应USDT,USDT兑换法币，回收USDT。
交易 具体看一个交易吧。
先上图：
主要看交易的输入与输出，这里关注点主要在输出，为什么输出有三个呢？ 第一个很容易理解，表示找零 第二个表示什么呢？表示转帐对方的地址，具体参考wiki 第三个OP_RETURN用于存储Tether部分转帐信息
图中的0x155十六进对应十进制341，在染色币的体系中对应类型表示Tether，具体参考染色币列表。 转帐的数量在哪里体现呢？转帐数字为000002ba7def3000，占用8个字节。对应十进制数字结果为：
&amp;gt;&amp;gt;&amp;gt; int(&#39;0x000002ba7def3000&#39;,16) 3000000000000L  图中显示的Tether的交易的信息，这些交易信息来自比特币交易信息。
omni封装OP_RETURN信息代码如下：
UniValue omni_createpayload_simplesend(const UniValue&amp;amp; params, bool fHelp) { if (fHelp || params.size() != 2) throw runtime_error( &amp;quot;omni_createpayload_simplesend propertyid \&amp;quot;amount\&amp;quot;\n&amp;quot; &amp;quot;\nCreate the payload for a simple send transaction.\n&amp;quot; &amp;quot;\nArguments:\n&amp;quot; &amp;quot;1.</description>
    </item>
    
    <item>
      <title>array vs list</title>
      <link>https://blog.ipds.top/2018/02/21/array-vs-list/</link>
      <pubDate>Wed, 21 Feb 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/02/21/array-vs-list/</guid>
      <description>array define An array is collection of items stored at contiguous memory locations. The idea is to store multiple items of same type together. This makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., the memory location of the first element of the array (generally denoted by the name of the array).
complexity space O(n)
time write by index write by index: O(1)</description>
    </item>
    
    <item>
      <title>谈谈数字货币钱包</title>
      <link>https://blog.ipds.top/2018/02/21/%E8%B0%88%E8%B0%88%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E9%92%B1%E5%8C%85/</link>
      <pubDate>Wed, 21 Feb 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/02/21/%E8%B0%88%E8%B0%88%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E9%92%B1%E5%8C%85/</guid>
      <description> 战略地位 基于区块链的价值互联网，离不开token经济。数字货币钱包在整个区块链生态的地位如同互联网的支付宝与微信支付。其重要性不用多说了。
功能 从价值的角度来看，主要有以下三个功能：
 价值确权 价值存储 价值IO  价值IO，以Wallet as a Service方式有以下业务：
 金融（理财，期货等等） 交易（接入去中心化交易，中心化交易所，场外交易） Dapp平台，支持第三方Dapp接入  本质 从技术上看，本质上是私钥，私钥，私钥。重要的事情说三遍。
价值确权通过私钥来完成，谁拥有私钥谁就拥有对应的价值。
价值存储就是存储私钥。
价值IO对应的功能都需要私钥配合实现。
分类 数字货币钱包从形态有如下类型：
 硬件钱包，如Trezo 移动App，如imtoken，bitpay，58wallet Web网站，如myetherwallet 浏览器扩展应用，如MetaMask 桌面应用程序 中心化交易所 代码，完成私钥管理与交易功能即可  从私钥是否连网可以分为：
 冷钱包 不联网 热钱包 联网  安全 钱包的安全性无须多说。
钱包的安全性由用户自己负责。
最重要理解原理，提高安全意识。
钱包与交易所 钱包+撮合引擎=交易所
附加功能  IM 资讯 行情 增值服务  （PS: 币圈一日，世上一年，更有各种新技术层出不穷，需要深入学习，恕没有展开说明，望见谅）。
参考  Choose your Bitcoin wallet 比特币冷热钱包教学 知乎：比特币用哪一种钱包比较靠谱，如何保障交易安全？  </description>
    </item>
    
    <item>
      <title>从货币的角度看比特币</title>
      <link>https://blog.ipds.top/2018/02/05/%E4%BB%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8B%E6%AF%94%E7%89%B9%E5%B8%81/</link>
      <pubDate>Mon, 05 Feb 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/02/05/%E4%BB%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8B%E6%AF%94%E7%89%B9%E5%B8%81/</guid>
      <description>说明 本文采用对比思维来比较货币与比特币。
整个内容通过问答的方式进行。
货币 问题：为什么需要货币？  在国内充当交易等价物 解决国际贸易中不同种类的货币如何相互兑换的问题 因为信贷的需要  问题：谁可以发行货币？ 各国央行（美国对应是美联储）。这里先必须强调，央行唯一发行的单位。
问题：央行发行货币的方式有哪些？ 以中国为例，央行发行货币有以下三种方式：
 向商业银行提供货款 以本国法币兑换挣回来的外汇 向政府或者国有企业等单位提供借款  问题：货币的发行量怎么确定？ 具体理论模型： M = PQ/V
其中M指流通中所需货币量（通货量） 其中P指商品的平均价格 其中Q指商品数量 其中V指货币流通速度（以货币周转次数计）
如何设定于P,Q,V的值取决于政策与策略，反正是一件很复杂的事情。
这里举两个乱发货币的典型（过于超发货币，是自寻死路，会造成信用破产）： 1. 国共内战的国民党 2. 津巴布韦
货币发行控制权在央行手中。
问题：货币发行以什么作为背书？ 国家实力，无论是早期的英镑还是现在的美元。
比特币 问题：为什么需要比特币？ 存在即合理。比特币的一些特性满足市场的需求。
问题：谁可以发行比特币？ 在比特币被挖完之前，通过竞争，成功获取记帐权的矿工可以发行比特币。
问题：发行比特币的方式有哪些？ 总量设定，通过挖矿定时释放的方式。整个发行控制权由代码控制，外人一般无法更改。
问题：比特币的发行量怎么确定？ 比特币总量2100万。更多参考Controlled supply
问题：比特币以什么作为背书？ 比特币背后的区块链技术及其支持区块链技术运行且保证整个比特币系统安全的算力。
问题：比特币是货币吗？ 不是。从功能上看有部分货币的功能，在法律上看肯定不是，没有国家背书，从应用上看，价格不稳定，没有建立起（比特）币本位的大量共识，价格还是以各国法币来计算，所以把比特币作为数字黄金。
PS: 初学经济学，有不足与错误敬请指正。
参考  《货币的非国家化》  (End)
欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>对中国互联网产品的一些建议</title>
      <link>https://blog.ipds.top/2018/02/05/%E5%AF%B9%E4%B8%AD%E5%9B%BD%E4%BA%92%E8%81%94%E7%BD%91%E4%BA%A7%E5%93%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Mon, 05 Feb 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/02/05/%E5%AF%B9%E4%B8%AD%E5%9B%BD%E4%BA%92%E8%81%94%E7%BD%91%E4%BA%A7%E5%93%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/</guid>
      <description>具体以公司及产品划分。
腾讯 微信  整理未读信息，而不是让用户去找哪条信息未读，特别是存在大量的会话的情况 公众帐号平台写作支持从本地导入markdown功能 公众帐号与小程序帐号能否统一
  腾讯云  优化一下linux包下载速度，直接走内部镜像   微博  支持像twitter那样截图直接上传功能 继续像twitter学习，让用户来决定关注什么 (Tips: 建议用户遇到这种情况，直接将被动主动帐号屏蔽)  百度 hao123  让hao123回到它最初的形式  搜索  收录网站体验太差了，与google，bing比较这方面相差10倍以上 贴吧广告太多，自作死，支持内容电商也比插入广告要好  字节跳动 今日头条  希望推荐算法不止是迎合用户还有引导用户  飞聊  飞聊应该与今日头条打通，让头条号作者与读者之间更高层次的互动  (未完，持续更新)</description>
    </item>
    
    <item>
      <title>区块链项目点评3-去中心化交易所</title>
      <link>https://blog.ipds.top/2017/12/22/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%82%B9%E8%AF%843-%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E4%BA%A4%E6%98%93%E6%89%80/</link>
      <pubDate>Fri, 22 Dec 2017 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2017/12/22/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%82%B9%E8%AF%843-%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E4%BA%A4%E6%98%93%E6%89%80/</guid>
      <description>中心化交易所 先从中心化交易所说起，从本质上看数字货币交易所与生活中常见的股票交易是一样。整个交易系统的核心是：撮合引擎。其中撮合系统核心原则如下：
 队列顺序价格优先、同价格下时间优先
 撮合顺序及要求：时间优先，条件判断（ 撮合引擎接收到新的买入订单,则会到卖出队列的头部查找是否存在符合价格规则的卖出订单,如果存在卖出价格小于或等于买入价格的订单,则从队列中取出此订单并撮合成一笔交易;如果卖出队列为空或队列头部不满足价格关系,则将买入订单插入买入队列中,由于买入队列是按照价格与时间先后进行排序,所以新插入的订单会经过一次排序插入到买入队列的相应位置。）
  提到上面这些原则，不是为了引入如何设计一个撮合系统的话题，而是通过上面的原则认识到：撮合引擎属于中心化计算与处理。正如我常说一句话：控制要作集中式，业务要作分布式。
去中心化交易所 由于中心化交易所各种缺点：
 暗箱操作 存在跑路风险 政府的管制 资产托管风险
 安全问题，例如黑客盗币 坚守自盗
  去中心化交易具有以下优点：
 更加安全 更好流通性 简单便捷 资产可控  这里下结论：去中心化交易所才是未来。
去中心化交易所现在处于战国七雄争霸时代，未来格局会是怎么样，需要继续观察与跟进。 下面就0x与KyberNetwork展开说明。
0x 目标与定位 0x目标是建立公共开放的交易协议，将协议层和应用层解耦
流程 熟悉流程，有利于理解原理。具体流程如下：
各个流程说明如下：
 Maker授权DEX合约访问账户中TokenA的余额 Maker发起兑换TokenB的订单，订单包含兑换率、过期时间和签名 Maker广播这个订单到网络中，链下orderbook Taker获取订单后，决定执行这个交易 Taker授权DEX合约访问账户中TokenB的余额 Taker提交Maker签名的订单给DEX合约 DEX合约验证Maker签名，订单有效性，包括时间和是否已经完成，然后根据指定的兑换率执行Token转移  从上面的流程可知，整个交易流程是链下广播与链上结算。
评价  专注于协议层，支持各种DApp接入 去中心化治理机制，方便升级与更新，同时不影响DApp与用户 链下广播与链上结算方式具有交易费低，交易速度快等优点 问题：由于订单信息并没有上链，链下广播的订单的有效性问题  参考  0x 白皮书  KyberNetwork 目标与定位 链上的去中心化交易所
系统架构 这里面主要角色如下：
 在网络中发送与接收代币的用户。KyberNetwork的用户包括个人用户、智能合约用户、商家。 为平台提供流动性的（通常多个）储备实体。它可以是平台自己的储备库或者由其他人注册的第三方储备库。根据是否从公众那里获取储备代币，储备库分为两种：公有储备库和私有储备库。 储备贡献者，提供资金分享利润 维持储备、决定兑换率并将该比率反馈给KyberNetwork的储备管理者 KyberNetwork 运营者，负责在网络中添加、删除储备实体以及将代币对列入/移出交易列表  流程 几个主要流程如下：</description>
    </item>
    
    <item>
      <title>Gorm小技巧: 如何优雅地创建多个相同的表</title>
      <link>https://blog.ipds.top/2017/12/21/gorm%E5%B0%8F%E6%8A%80%E5%B7%A7-%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E8%A1%A8/</link>
      <pubDate>Thu, 21 Dec 2017 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2017/12/21/gorm%E5%B0%8F%E6%8A%80%E5%B7%A7-%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E8%A1%A8/</guid>
      <description>背景 因为需要bitfinex抓取各种历史交易信息。为了实现可扩展与便于数据管理，在数据架构设计方面满足下面的需求：
 不同的交易对的交易数据放到不同的表上。  方案 方案1 编写sql,通过多条sql语句创建多个不同名字的表。
优点： 1. 理解简单，最容易的方案
缺点：
 如果修改表名称、调整表结构、调整索引，需要重新写sql，如果在线上部署，需要到多台机器上部署与执行，加大出错的概率
 需要额外维护表名称
 不利于docker部署，部署业务sql建立相应表
  总之，最容易的方案，确实最难维护的方案。
方案2 方案1种种不足，让我这个懒人实在不感兴趣。要追求优雅的实现方案。所以就发现下面的方案。
type User struct { Name string Pwd string tableName string } func (u *User) TableName() string { return u.tableName }  看完上面的代码，大家应该会立即明白：原来只需要对表结构对应的结构体定义一种方法 TableName(),就可以实现。
一个十分简单示例代码如下：
package main import ( &amp;quot;fmt&amp;quot; _ &amp;quot;github.com/go-sql-driver/mysql&amp;quot; &amp;quot;github.com/jinzhu/gorm&amp;quot; ) type User struct { Name string Pwd string tableName string } func (u *User) TableName() string { // custom table name, this is default return u.</description>
    </item>
    
    <item>
      <title>从数据库角度看区块链</title>
      <link>https://blog.ipds.top/2017/12/21/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%92%E5%BA%A6%E7%9C%8B%E5%8C%BA%E5%9D%97%E9%93%BE/</link>
      <pubDate>Thu, 21 Dec 2017 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2017/12/21/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%92%E5%BA%A6%E7%9C%8B%E5%8C%BA%E5%9D%97%E9%93%BE/</guid>
      <description>对比    比较项 集中式数据库 分布式数据库 PoW区块链 bitcoin区块链 Hashgraph     少量的计算 Yes Yes No No Yes   抗DoS No No Yes Yes Yes   不存在SPOF No Yes Yes Yes Yes   加密发送 Yes Yes Yes Yes Yes   可信的时间戳 No No No No Yes   可扩展性 Yes No No Yes Yes   不可修改 No Yes Yes Yes Yes   分布式信任 No Yes Yes Yes Yes   高可用 No Yes Yes Yes Yes    后记 这里只是从数据库的角度来看区块链技术，区块链技术并不是一种数据库技术。</description>
    </item>
    
    <item>
      <title>比特币及莱特币节点连接失败处理</title>
      <link>https://blog.ipds.top/2017/11/06/%E6%AF%94%E7%89%B9%E5%B8%81%E5%8F%8A%E8%8E%B1%E7%89%B9%E5%B8%81%E8%8A%82%E7%82%B9%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 06 Nov 2017 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2017/11/06/%E6%AF%94%E7%89%B9%E5%B8%81%E5%8F%8A%E8%8E%B1%E7%89%B9%E5%B8%81%E8%8A%82%E7%82%B9%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86/</guid>
      <description>问题描述 节点进程起来后，同其他的节点连接失败。
2017-11-14 08:03:36 connect() to 104.236.211.206:19335 failed after select(): Connection refused (111) 2017-11-14 08:03:37 connect() to 66.178.182.35:19335 failed after select(): Connection refused (111) 2017-11-14 08:03:38 connect() to 104.236.211.206:19335 failed after select(): Connection refused (111) 2017-11-14 08:03:39 connect() to 66.178.182.35:19335 failed after select(): Connection refused (111) 2017-11-14 08:03:40 connect() to 104.236.211.206:19335 failed after select(): Connection refused (111) 2017-11-14 08:03:41 connect() to 104.236.211.206:19335 failed after select(): Connection refused (111) 2017-11-14 08:03:42 connect() to 66.</description>
    </item>
    
    <item>
      <title>说说智能合约</title>
      <link>https://blog.ipds.top/2017/11/01/%E8%AF%B4%E8%AF%B4%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</link>
      <pubDate>Wed, 01 Nov 2017 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2017/11/01/%E8%AF%B4%E8%AF%B4%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</guid>
      <description>智能合约 智能合约伴随了以太坊出现的而诞生，是以太坊最大的亮点，以其在ICO的广泛地应用而被熟知。其定义是： 智能合约是存储在区块链网络中的一段代码。它界定了各方使用合约的条件，在满足合约条件下某些机器指令被执行。
特征 智能合约具有自治、自足、去中心化三个特征： 自治是指一旦启动便不受任何干预，忠实按照既定程序执行； 自足是指程序可以自主控制其计算所涉及的资源，比如有权限调配参与者的资金和财产； 去中心化是指它不依赖某个单独的服务器，而是由分布式网络的节点共同支持运行
意义  提供可信第三方，具有高可用、不可修改、去中心化等特点 区块链的商业范围从货币扩展到全部数字化的价值，如比特币应用局限在数字货币领域，有了智能合约，以太坊平台上诞生cryptokitties杀手级应用 未来AI进入很多应用领域，智能合约为机器经济提供法律，为机器经济协作提供合约工具 智能合约实现价值交易与处理，而不是比特币仅提供一个价值传输的网络 对于社会来说，智能合约的代码即法律(code as law)特性有利于减少欺诈，降低成本，提高效率  问题与未来 先谈问题，现在的智能合约，以以太坊为例，存在以下问题：
 工具缺乏 合约安全性与正确性保证取决于开发人员对技术与业务的理解与认识 基本上无合约治理 合约成本高 由于可信数据的不足，应用范围受限 合约编程语言小众（好消息是EOS已经在尝试在其智能合约支持c++标准库）  现阶段智能合约最成功的应用有两个：
 ICO cryptokitties  结合现实，问题及其意义，智能合约的威力还没有发挥出来，未来随着区块链平台的发展与进步，区块链+智能合约必定成为支撑价值互联网的基石。
最后，智能合约带来更多信任让社会更加高效与美好。
参考  cryptokitties  欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)
（end）</description>
    </item>
    
    <item>
      <title>这也许是最快的搭建博客网站的方式</title>
      <link>https://blog.ipds.top/2017/10/27/%E8%BF%99%E4%B9%9F%E8%AE%B8%E6%98%AF%E6%9C%80%E5%BF%AB%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 27 Oct 2017 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2017/10/27/%E8%BF%99%E4%B9%9F%E8%AE%B8%E6%98%AF%E6%9C%80%E5%BF%AB%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>前言 搭建个人博客有很多方式，如wordpress，jekii, hexo，个人DIY;
本文主要介绍另一种方案: hugo+caddy
建一个网站要要做哪些事情 这里分解如下：
 网站前端 网站后端 域名 主机 部署 维护  下面就这些方面以自己搭建ipds.top网站为例说明。
网站前端 对于前端，个人能力与经历有限，缺少DIY能力，那就是找主题模板，经济有效。 就IPDS 由于对golang的热爱，后端选择hugo。那么主题有以下选择：
 直接从gohugo 中查找 github中查找
  个人采用的主题是icarus
网站后端 如上面所说，后端选择hugo。
这里讲一下主要碰到问题。
版本问题  hugo版本不要使用apt-get命令直接的，防止hugo版本过低 个人使用版本如下  root@BC:~# hugo version Hugo Static Site Generator v0.31.1 linux/amd64 BuildDate: 2017-10-14T22:10:38+08:00  参数 常见的参数配置如下：
hugo server --baseUrl=https://blog.ipds.top/ --appendPort=false  小结 这里要宣传一下hugo，采用hugo具有如下优点：
 有不错可用的主题 简单好用 社区不断更新与发展 内容可以保存到内存，访问速度快  域名 从阿里云注册一个top域名。 这里要吐槽一下阿里云，注册域名不提示域名一定要认证后才能用。（因为我的ECS买的是香港的，买完测试后也确认可用，过几天一看居然不能用）
主机 主机采用阿里云ECS，地点在香港。 在香港最大的好处就是解决了墙的问题。
部署 反向代理 方案1： 大家熟知的nginx</description>
    </item>
    
    <item>
      <title>区块链项目点评2-以太坊</title>
      <link>https://blog.ipds.top/2017/10/21/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%82%B9%E8%AF%842-%E4%BB%A5%E5%A4%AA%E5%9D%8A/</link>
      <pubDate>Sat, 21 Oct 2017 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2017/10/21/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%82%B9%E8%AF%842-%E4%BB%A5%E5%A4%AA%E5%9D%8A/</guid>
      <description> 以太坊  一台超级计算机 现阶段最好的数字货币 继承比特币的区块链技术，同时引入了超级亮点：智能合约，让信任成为可能 以太币正在成为区块链经济中的石油 按交易次数计算数字货币交易市场一半以上，如下图所示  有以下问题： 交易速度慢，最大的问题，也是被容易被EOS挑战与冲击的地方 帐本体积大 隐私问题 链上的可信数据太单一，只有交易数据，制约智能合约的应用范围
 以太坊sharding方案，加大了系统的复杂性，也带来了一些安全问题
 不得不关注与小心的以太坊安全问题，例如DAO问题
 ICO是以太坊上最成功的应用
 CryptoKitties是以太坊上最让人鼓舞的Dapp
 以太坊有优秀团队与成熟开放的社区
 以太坊会不断地进化与成熟，以太坊未来可期
  参考  ethereum CryptoKitties plasma  </description>
    </item>
    
    <item>
      <title>区块链项目点评1-比特币</title>
      <link>https://blog.ipds.top/2017/10/20/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%82%B9%E8%AF%841-%E6%AF%94%E7%89%B9%E5%B8%81/</link>
      <pubDate>Fri, 20 Oct 2017 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2017/10/20/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%82%B9%E8%AF%841-%E6%AF%94%E7%89%B9%E5%B8%81/</guid>
      <description> 比特币  数字黄金，但是并比黄金好很多 区块链技术始祖 PoW共识是比特币技术最大的创新 将激励与竞争引入到机器，符合经济学原理 让财富最大程度上属于个人 比特币的信用来源数学, 来自于密码学，比特币是数学保护的财富 现阶段易涨难跌 去中心化是把双刃剑 技术并无罪，罪在人性 无国界，这是比特币坚强的重要因素 比特币不是泡沫，是共识的数字化 比特币财产的转移是一种基于多数人见证所达成的共识 比特币是一个英勇的挑战者，挑战法币，有强大的潜在的敌人，政治不正确，可能会受到强大的政治打压 点燃数字货币的星星之火，新方向的领航者与开拓者，但是并不完美 完成历史使命的传递，比特币最终会消失 IFO对于比特币来说一场分裂，并且带来安全问题（重放攻击），相同的地址影响体验 安全问题一直存在，聪明强大的AI是否带来致命一击呢 比特币价格与google搜索指数之间的关系，如下图  这张图表明比特币越来越受欢迎，且是用钱来投的票。
参考  bitcoin源码 bitcoinABC wiki developer-documentation  </description>
    </item>
    
    <item>
      <title>Read</title>
      <link>https://blog.ipds.top/2017/10/02/read/</link>
      <pubDate>Mon, 02 Oct 2017 21:49:20 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2017/10/02/read/</guid>
      <description>评分说明 ☆☆☆☆☆，五星，经典之作，强烈推荐
☆☆☆☆，四星， 适合大众需求，推荐
☆☆☆，三星 不错，看个人口味与需求
☆☆，二星 不推荐
☆，一星 强烈不推荐，得不偿失，存在严重误导
C/C++方面  《C与指针》 ☆☆☆☆☆，五星 入门推荐，不要上国产参考书的当 《 C陷阱与缺陷》 ☆☆☆☆☆，五星 帮你避开常见C语言坑 《C专家编程》 ☆☆☆☆，四星 《C++沉思录》 ☆☆☆☆，四星 C++ 进阶之道 《C++ Prime Plus》 ☆☆☆☆，四星 C++ 入门必备，讲解详细  Python  《Python 基础教程》☆☆☆☆☆，五星 个人觉得最佳Python入门学习材料，打好基础就用google，github来解决问题  Go  《Go程序设计语言 英文版》☆☆☆☆，四星  设计模式  《Head First 设计模式 中文版》  计算机基础  《深入理解计算机系统 第2版》 ☆☆☆☆☆，五星 请精读且多读几遍，计算机基础方面读这一本书就可以了。 《计算机程序的构造和解释》 ☆☆☆☆☆，五星 2018  网络编程  《TCP/IP 详解 卷1：协议》 ☆☆☆☆☆，五星 《UNIX 网络编程》 ☆☆☆☆，四星 《Linux 网络编程》 ☆☆☆，三星  数据结构与算法  《算法导论》 《数据结构 C语言版》  Linux  《鸟哥的Linux私房菜》 ☆☆☆☆，四星 Linux操作入门参考 《深入理解Linux 内核架构》 《精通Linux驱动程序开发》 《Linux内核设计艺术》 《The Linux Programming Interface Handbook》  云计算  《Software Defined Networks》 ☆☆☆☆，四星 偏架构，需要一定基础与背景 《腾云 云计算和大数据时代网络技术揭秘》 ☆☆☆☆，四星 通俗易懂地解释网络新技术</description>
    </item>
    
    <item>
      <title>Share</title>
      <link>https://blog.ipds.top/2017/10/02/share/</link>
      <pubDate>Mon, 02 Oct 2017 21:49:20 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2017/10/02/share/</guid>
      <description>科普  图解计算机科学 Why does time pass? | The Economist A MUST SEE!!! The Most Eye Opening 10 Minutes Of Your Life | Dr. Bruce Lipton  数据  The Map of Mathematics  经济  经济机器是怎样运行的(文字版) 经济机器是怎样运行的 (时长30分钟) Ray Dalio  工具 VS Code  VS Code Top-Ten Pro Tips VS Code: The Last Editor You&amp;rsquo;ll Ever Need  chrome  vimium Google Translate Plus   信息 搜索  15 Ways to Search Google 96% of People Don’t Know About  网站  10 Useful Websites You Wish You Knew Earlier!</description>
    </item>
    
    <item>
      <title>Slide</title>
      <link>https://blog.ipds.top/2017/10/02/slide/</link>
      <pubDate>Mon, 02 Oct 2017 21:49:20 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2017/10/02/slide/</guid>
      <description> 2017  高性能服务器设计与优化(High performance server design and optimization) Golang基础 比特币介绍-技术基础篇  2018  数字货币钱包产品定位与战略.pdf 下一代互联网基础：IPFS.pdf  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.ipds.top/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.ipds.top/1/01/01/</guid>
      <description>每周完成一个ARTS： 1.Algorithm：每周至少做一个 leetcode 的算法题 2.Review：阅读并点评至少一篇英文技术文章 3.Tip：学习至少一个技术技巧 4.Share：分享一篇有观点和思考的技术文章 +++ banner = &amp;ldquo;&amp;rdquo; categories = [&amp;ldquo;DataStruct&amp;rdquo;] date = &amp;ldquo;2019-03-08T11:58:06+02:00&amp;rdquo; description = &amp;ldquo;&amp;rdquo; images = [] menu = &amp;ldquo;&amp;rdquo; tags = [&amp;ldquo;DataStruct&amp;rdquo;] title = &amp;ldquo;作恶的矿工们&amp;rdquo; draft = true +++
 Algorithm leetcode-42 42. Trapping Rain Water
Desc Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</description>
    </item>
    
  </channel>
</rss>